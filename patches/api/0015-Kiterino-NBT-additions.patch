From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sun, 13 Feb 2022 06:28:00 +0100
Subject: [PATCH] Kiterino NBT additions


diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 7c8a650189116c6e5840021ca0a4940c31f35096..9c99b9e88d7bc61ebd1ad6c81511148e9bf2f019 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -798,5 +798,15 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
     default @NotNull de.tr7zw.changeme.nbtapi.NBTCompound getPersistentData() {
         return new de.tr7zw.changeme.nbtapi.NBTBlock(this).getData();
     }
+
+    /**
+     * Returns a custom tag container of this block (in chunk's nbt) under
+     * Kiterino namespace.
+     *
+     * @return custom NBT tags container under Kiterino namespace
+     */
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTCompound getKiterinoNbt() {
+        return getPersistentData().getOrCreateCompound(org.bukkit.Bukkit.getName());
+    }
     // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/TileState.java b/src/main/java/org/bukkit/block/TileState.java
index 92ee8d4b4252dd018f49b862fa2dd2026f7e869e..0b0d079240601d9d1ab6548e62831803f6557952 100644
--- a/src/main/java/org/bukkit/block/TileState.java
+++ b/src/main/java/org/bukkit/block/TileState.java
@@ -122,5 +122,57 @@ public interface TileState extends BlockState, PersistentDataHolder {
     default void modifyPersistentData(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
         de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, consumer);
     }
+
+    /**
+     * Reads nbt data of this tile state
+     *
+     * @param consumer consumer that will be used to read the tile state's tag container
+     */
+    default void readKNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, nbt -> {
+            String kiterinoTag = org.bukkit.Bukkit.getName();
+            // Still passing an empty nbt container in case passed function uses something like getOrDefault
+            consumer.accept(nbt.hasTag(kiterinoTag) ? nbt.getCompound(kiterinoTag) : de.tr7zw.changeme.nbtapi.NBT.createNBTObject());
+        });
+    }
+
+    /**
+     * Gets data from tile state's nbt under Kiterino namespace
+     *
+     * @param function function that will be applied to the entity's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getKNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.getPersistentData(this, nbt -> {
+            String kiterinoTag = org.bukkit.Bukkit.getName();
+            // Still passing an empty nbt container in case passed function uses something like getOrDefault
+            return function.apply(nbt.hasTag(kiterinoTag) ? nbt.getCompound(kiterinoTag) : de.tr7zw.changeme.nbtapi.NBT.createNBTObject());
+        });
+    }
+
+    /**
+     * Modifies tag container of the tile state under Kiterino namespace
+     *
+     * @param function function that will be applied to the tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetKNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, nbt -> {
+            return function.apply(nbt.getOrCreateCompound(org.bukkit.Bukkit.getName()));
+        });
+    }
+
+    /**
+     * Modifies tag container of the tile state under Kiterino namespace
+     *
+     * @param consumer consumer that will be used to modify the tile state's tag container
+     */
+    default void modifyKNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, nbt -> {
+            consumer.accept(nbt.getOrCreateCompound(org.bukkit.Bukkit.getName()));
+        });
+    }
     // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 713bb1a8ce3e55e68d731bb4758bd46e6cf479a0..cc032381020064baec057a7913352d1ee1eb9f4f 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1230,5 +1230,57 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     default void modifyPersistentData(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
         de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, consumer);
     }
+
+    /**
+     * Reads nbt data of this entity
+     *
+     * @param consumer consumer that will be used to read the entity's tag container
+     */
+    default void readKNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, nbt -> {
+            String kiterinoTag = org.bukkit.Bukkit.getName();
+            // Still passing an empty nbt container in case passed function uses something like getOrDefault
+            consumer.accept(nbt.hasTag(kiterinoTag) ? nbt.getCompound(kiterinoTag) : de.tr7zw.changeme.nbtapi.NBT.createNBTObject());
+        });
+    }
+
+    /**
+     * Gets data from entity's nbt under Kiterino namespace
+     *
+     * @param function function that will be applied to the entity's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getKNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, nbt -> {
+            String kiterinoTag = org.bukkit.Bukkit.getName();
+            // Still passing an empty nbt container in case passed function uses something like getOrDefault
+            return function.apply(nbt.hasTag(kiterinoTag) ? nbt.getCompound(kiterinoTag) : de.tr7zw.changeme.nbtapi.NBT.createNBTObject());
+        });
+    }
+
+    /**
+     * Modifies tag container of the entity under Kiterino namespace
+     *
+     * @param function function that will be applied to the tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetKNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, nbt -> {
+            return function.apply(nbt.getOrCreateCompound(org.bukkit.Bukkit.getName()));
+        });
+    }
+
+    /**
+     * Modifies tag container of the entity under Kiterino namespace
+     *
+     * @param consumer consumer that will be used to modify the entity's tag container
+     */
+    default void modifyKNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, nbt -> {
+            consumer.accept(nbt.getOrCreateCompound(org.bukkit.Bukkit.getName()));
+        });
+    }
     // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 7bbc182e4ea81de7dcba14b891eb1a0c4d65044a..c2732ebd350bc282a7266ea8ee88b888eb8e53b0 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1699,5 +1699,80 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
     public void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT> consumer) {
         de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
     }
+
+    /**
+     * Reads nbt data of this items
+     *
+     * @param consumer consumer that will be used to read the item's tag container
+     */
+    public void readKNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, nbt -> {
+            String kiterinoTag = org.bukkit.Bukkit.getName();
+            // Still passing an empty nbt container in case passed function uses something like getOrDefault
+            consumer.accept(nbt.hasTag(kiterinoTag) ? nbt.getCompound(kiterinoTag) : de.tr7zw.changeme.nbtapi.NBT.createNBTObject());
+        });
+    }
+
+    /**
+     * Gets data from item's nbt under Kiterino namespace
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T getKNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, nbt -> {
+            String kiterinoTag = Bukkit.getName();
+            // Still passing an empty nbt container in case passed function uses something like getOrDefault
+            return function.apply(nbt.hasTag(kiterinoTag) ? nbt.getCompound(kiterinoTag) : de.tr7zw.changeme.nbtapi.NBT.createNBTObject());
+        });
+    }
+
+    /**
+     * Modifies tag container of the item under Kiterino namespace
+     *
+     * @param function function that will be applied to the tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T modifyAndGetKNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, nbt -> {
+            return function.apply(nbt.getOrCreateCompound(Bukkit.getName()));
+        });
+    }
+
+    /**
+     * Modifies tag container of the item under Kiterino namespace
+     *
+     * @param consumer consumer that will be used to modify the item's tag container
+     */
+    public void modifyKNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, nbt -> {
+            consumer.accept(nbt.getOrCreateCompound(Bukkit.getName()));
+        });
+    }
+
+    /**
+     * Returns custom item ID, if present
+     *
+     * @return ID if present
+     */
+    public @Nullable String subtractId() {
+        if (isEmpty()) return null;
+        return getNbt(nbt -> {
+            String kiterinoTag = Bukkit.getName();
+            if (!nbt.hasTag(kiterinoTag, de.tr7zw.changeme.nbtapi.NBTType.NBTTagCompound)) return null;
+            return nbt.getCompound(kiterinoTag).getOrNull("Id", String.class);
+        });
+    }
+
+    /**
+     * Checks whether this item has Kiterino ID tag
+     *
+     * @return true if item has Kiterino tag
+     */
+    public boolean isKItem() {
+        return subtractId() != null;
+    }
     // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index a53a983fc2b86bdb87e77329f9c537ad4a8c70c8..6cef9d882dca815c2a9fb61b43e35929da2a8ecc 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -229,5 +229,15 @@ public interface PersistentDataContainer {
     default @NotNull de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getPersistentData() {
         return new de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer(this);
     }
+
+    /**
+     * Returns a custom tag container under Kiterino namespace.
+     *
+     * @return custom NBT tags container under Kiterino namespace
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTCompound getKiterinoNbt() {
+        return getPersistentData().getOrCreateCompound(org.bukkit.Bukkit.getName());
+    }
     // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
index 3bba12d6855119ceb02d2a0ed96833a0ce41280a..c01a38068298733586c4101a377d78f448434221 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
@@ -29,6 +29,16 @@ public interface PersistentDataHolder {
     default @NotNull de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getPersistentData() {
         return getPersistentDataContainer().getPersistentData();
     }
+
+    /**
+     * Returns a custom tag container under Kiterino namespace.
+     *
+     * @return custom NBT tags container under Kiterino namespace
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTCompound getKiterinoNbt() {
+        return getPersistentDataContainer().getKiterinoNbt();
+    }
     // Kiterino end
 
 }

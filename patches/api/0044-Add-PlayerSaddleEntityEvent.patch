From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sat, 19 Feb 2022 08:20:30 +0200
Subject: [PATCH] Add PlayerSaddleEntityEvent


diff --git a/src/main/java/me/sosedik/kiterino/event/player/PlayerSaddleEntityEvent.java b/src/main/java/me/sosedik/kiterino/event/player/PlayerSaddleEntityEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..7c4de724c210171cf336a4365935b89fed3e5eaa
--- /dev/null
+++ b/src/main/java/me/sosedik/kiterino/event/player/PlayerSaddleEntityEvent.java
@@ -0,0 +1,120 @@
+package me.sosedik.kiterino.event.player;
+
+import org.bukkit.entity.Player;
+import org.bukkit.entity.Steerable;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockDispenseArmorEvent;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when player equips saddle on steerable entity<p>
+ * See {@link BlockDispenseArmorEvent} for similar behaviour for dispensers
+ */
+public class PlayerSaddleEntityEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+
+    private final Steerable entity;
+    private final ItemStack item;
+    private boolean consumeItem;
+    private boolean playSound;
+    private boolean cancelled;
+
+    public PlayerSaddleEntityEvent(@NotNull Player player, @NotNull Steerable entity, @NotNull ItemStack item) {
+        super(player);
+        this.entity = entity;
+        this.item = item;
+        this.consumeItem = true;
+        this.playSound = true;
+    }
+
+    /**
+     * Gets the entity involved in this event
+     *
+     * @return steerable entity
+     */
+    @NotNull
+    public Steerable getEntity() {
+        return entity;
+    }
+
+    /**
+     * Returns the item involved in this event
+     *
+     * @return used saddle
+     */
+    @NotNull
+    public ItemStack getItem() {
+        return item;
+    }
+
+    /**
+     * Whether saddle should be consumed
+     *
+     * @return true, if saddle will be consumed
+     */
+    public boolean isConsumeItem() {
+        return consumeItem;
+    }
+
+    /**
+     * Sets whether saddle should be consumed
+     *
+     * @param consumeItem whether to consume or not
+     */
+    public void setConsumeItem(boolean consumeItem) {
+        this.consumeItem = consumeItem;
+    }
+
+    /**
+     * Whether sound should be played
+     *
+     * @return true, if sound will be played
+     */
+    public boolean isPlaySound() {
+        return playSound;
+    }
+
+    /**
+     * Sets whether sound should be played
+     *
+     * @param playSound whether to play or not
+     */
+    public void setPlaySound(boolean playSound) {
+        this.playSound = playSound;
+    }
+
+    /**
+     * @return if cancelled, the bottle will not be filled.
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Set whether to cancel filling. If canceled,
+     * the bottle will not be filled.
+     *
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+}

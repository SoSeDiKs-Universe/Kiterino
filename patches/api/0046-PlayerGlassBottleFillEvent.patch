From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Mon, 27 Dec 2021 12:28:03 +0200
Subject: [PATCH] PlayerGlassBottleFillEvent


diff --git a/src/main/java/me/sosedik/kiterino/event/player/PlayerGlassBottleFillEvent.java b/src/main/java/me/sosedik/kiterino/event/player/PlayerGlassBottleFillEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..fe74a2a86c9faf1075b6f82f35d39bcbc94b7a37
--- /dev/null
+++ b/src/main/java/me/sosedik/kiterino/event/player/PlayerGlassBottleFillEvent.java
@@ -0,0 +1,84 @@
+package me.sosedik.kiterino.event.player;
+
+import org.bukkit.Material;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public class PlayerGlassBottleFillEvent extends PlayerEvent implements Cancellable {
+
+    private static final HandlerList handlers = new HandlerList();
+    private final @NotNull ItemStack item;
+    private @NotNull ItemStack newitem;
+    private boolean cancelled;
+
+    public PlayerGlassBottleFillEvent(@NotNull final Player player, @NotNull final ItemStack item, @NotNull final ItemStack newitem) {
+        super(player);
+        this.item = item;
+        this.newitem = newitem;
+    }
+
+    /**
+     * @return if cancelled, the bottle will not be filled.
+     */
+    @Override
+    public boolean isCancelled() {
+        return cancelled;
+    }
+
+    /**
+     * Set whether to cancel filling. If canceled,
+     * the bottle will not be filled.
+     *
+     * @param cancel true if you wish to cancel this event
+     */
+    @Override
+    public void setCancelled(boolean cancel) {
+        this.cancelled = cancel;
+    }
+
+    /**
+     * Gets the existing item that's being replaced.
+     *
+     * @return old item
+     */
+    @NotNull
+    public ItemStack getItem() {
+        return item;
+    }
+
+    /**
+     * Gets the new item that's replacing the old.
+     *
+     * @return new item
+     */
+    @NotNull
+    public ItemStack getNewItem() {
+        return newitem;
+    }
+
+    /**
+     * Set the new item that's replacing the old
+     *
+     * @param item the new item
+     */
+    public void setNewItem(@Nullable ItemStack item) {
+        this.newitem = item == null ? new ItemStack(Material.AIR) : item;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+
+}

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Mon, 27 Jun 2022 22:56:58 +0300
Subject: [PATCH] Paper PR - Allow using degrees for ArmorStand rotations


diff --git a/src/main/java/io/papermc/paper/math/Rotations.java b/src/main/java/io/papermc/paper/math/Rotations.java
new file mode 100644
index 0000000000000000000000000000000000000000..88f22773fe74c98f7e589b9f6920723834f094bb
--- /dev/null
+++ b/src/main/java/io/papermc/paper/math/Rotations.java
@@ -0,0 +1,100 @@
+package io.papermc.paper.math;
+
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Rotations is an immutable object that stores rotations
+ * in degrees on each axis (X, Y, Z).
+ */
+public interface Rotations {
+
+	/**
+	 * Rotations instance with every axis set to 0
+	 */
+	Rotations ZERO = ofDegrees(0, 0, 0);
+
+	/**
+	 * Creates a new Rotations instance holding the provided rotations
+	 *
+	 * @param x the angle for the X axis in degrees
+	 * @param y the angle for the Y axis in degrees
+	 * @param z the angle for the Z axis in degrees
+	 * @return Rotations instance holding the provided rotations
+	 */
+	static @NotNull Rotations ofDegrees(double x, double y, double z) {
+		return new RotationsImpl(x, y, z);
+	}
+
+	/**
+	 * Returns the angle on the X axis in degrees
+	 *
+	 * @return the angle in degrees
+	 */
+	double x();
+
+	/**
+	 * Returns the angle on the Y axis in degrees
+	 *
+	 * @return the angle in degrees
+	 */
+	double y();
+
+	/**
+	 * Returns the angle on the Z axis in degrees
+	 *
+	 * @return the angle in degrees
+	 */
+	double z();
+
+	/**
+	 * Returns a new Rotations instance which is the result
+	 * of changing the X axis to the passed angle
+	 *
+	 * @param x the angle in degrees
+	 * @return the resultant Rotations
+	 */
+	@NotNull Rotations withX(double x);
+
+	/**
+	 * Returns a new Rotations instance which is the result
+	 * of changing the Y axis to the passed angle
+	 *
+	 * @param y the angle in degrees
+	 * @return the resultant Rotations
+	 */
+	@NotNull Rotations withY(double y);
+
+	/**
+	 * Returns a new Rotations instance which is the result
+	 * of changing the Z axis to the passed angle
+	 *
+	 * @param z the angle in degrees
+	 * @return the resultant Rotations
+	 */
+	@NotNull Rotations withZ(double z);
+
+	/**
+	 * Returns a new Rotations instance which is the result of adding
+	 * the x, y, z components to this Rotations
+	 *
+	 * @param x the angle to add to the X axis in degrees
+	 * @param y the angle to add to the Y axis in degrees
+	 * @param z the angle to add to the Z axis in degrees
+	 * @return the resultant Rotations
+	 */
+	@NotNull Rotations add(double x, double y, double z);
+
+	/**
+	 * Returns a new Rotations instance which is the result of subtracting
+	 * the x, y, z components from this Rotations
+	 *
+	 * @param x the angle to subtract from the X axis in degrees
+	 * @param y the angle to subtract from the Y axis in degrees
+	 * @param z the angle to subtract from the Z axis in degrees
+	 * @return the resultant Rotations
+	 */
+	default @NotNull Rotations subtract(double x, double y, double z) {
+		return add(-x, -y, -z);
+	}
+
+}
\ No newline at end of file
diff --git a/src/main/java/io/papermc/paper/math/RotationsImpl.java b/src/main/java/io/papermc/paper/math/RotationsImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..cfcd29be7d81af3d548a29cce6d3747665b96ced
--- /dev/null
+++ b/src/main/java/io/papermc/paper/math/RotationsImpl.java
@@ -0,0 +1,27 @@
+package io.papermc.paper.math;
+
+import org.jetbrains.annotations.NotNull;
+
+record RotationsImpl(double x, double y, double z) implements Rotations {
+
+	@Override
+	public @NotNull RotationsImpl withX(double x) {
+		return new RotationsImpl(x, y, z);
+	}
+
+	@Override
+	public @NotNull RotationsImpl withY(double y) {
+		return new RotationsImpl(x, y, z);
+	}
+
+	@Override
+	public @NotNull RotationsImpl withZ(double z) {
+		return new RotationsImpl(x, y, z);
+	}
+
+	@Override
+	public @NotNull RotationsImpl add(double x, double y, double z) {
+		return new RotationsImpl(this.x + x, this.y + y, this.z + z);
+	}
+
+}
diff --git a/src/main/java/org/bukkit/entity/ArmorStand.java b/src/main/java/org/bukkit/entity/ArmorStand.java
index 707639096657f995cc812c7b50108eeed48e8181..4e5ae2bdcd5c70251b70851fcbd6cfc8a3d52644 100644
--- a/src/main/java/org/bukkit/entity/ArmorStand.java
+++ b/src/main/java/org/bukkit/entity/ArmorStand.java
@@ -380,6 +380,7 @@ public interface ArmorStand extends LivingEntity {
      */
     void setCanTick(final boolean tick);
 
+
     /**
      * Returns the item the armor stand has
      * equip in the given equipment slot
@@ -445,5 +446,101 @@ public interface ArmorStand extends LivingEntity {
      * @return {@code true} if the slot is disabled, else {@code false}.
      */
     boolean isSlotDisabled(@NotNull org.bukkit.inventory.EquipmentSlot slot);
+
+    /**
+     * Returns the ArmorStand's body rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull io.papermc.paper.math.Rotations getBodyRotations();
+
+    /**
+     * Sets the ArmorStand's body rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setBodyRotations(@NotNull io.papermc.paper.math.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's left arm rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull io.papermc.paper.math.Rotations getLeftArmRotations();
+
+    /**
+     * Sets the ArmorStand's left arm rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setLeftArmRotations(@NotNull io.papermc.paper.math.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's right arm rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull io.papermc.paper.math.Rotations getRightArmRotations();
+
+    /**
+     * Sets the ArmorStand's right arm rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setRightArmRotations(@NotNull io.papermc.paper.math.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's left leg rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull io.papermc.paper.math.Rotations getLeftLegRotations();
+
+    /**
+     * Sets the ArmorStand's left leg rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setLeftLegRotations(@NotNull io.papermc.paper.math.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's right leg rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull io.papermc.paper.math.Rotations getRightLegRotations();
+
+    /**
+     * Sets the ArmorStand's right leg rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setRightLegRotations(@NotNull io.papermc.paper.math.Rotations rotations);
+
+    /**
+     * Returns the ArmorStand's head rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @return the current rotations
+     */
+    @NotNull io.papermc.paper.math.Rotations getHeadRotations();
+
+    /**
+     * Sets the ArmorStand's head rotations as
+     * {@link io.papermc.paper.math.Rotations}.
+     *
+     * @param rotations the current rotations
+     */
+    void setHeadRotations(@NotNull io.papermc.paper.math.Rotations rotations);
     // Paper end
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sat, 31 Jul 2021 20:15:05 +0300
Subject: [PATCH] Add NBT API as a first-class lib


diff --git a/build.gradle.kts b/build.gradle.kts
index 37815cfda843b167853716202572e2845b5faaf5..db1e4457056fe659e8cf97af559073013d10256f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -48,6 +48,7 @@ dependencies {
     api("org.apache.logging.log4j:log4j-api:$log4jVersion")
     api("org.slf4j:slf4j-api:$slf4jVersion")
     api("io.sentry:sentry:5.4.0") // Pufferfish
+    api("de.tr7zw:item-nbt-api:2.12.1") // Kiterino
 
     implementation("org.ow2.asm:asm:9.4")
     implementation("org.ow2.asm:asm-commons:9.4")
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index eca55d8d3464f0e13a3b7984f74559ccda87edba..acde94c808ec2072e4d5c6daf9b73b76913d04a2 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -338,4 +338,16 @@ public interface Chunk extends PersistentDataHolder {
          */
         UNLOADED;
     }
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this chunk.
+     *
+     * @return vanilla NBT tags container
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTChunk getNbt() {
+        return new de.tr7zw.changeme.nbtapi.NBTChunk(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 49974558799830d827f9ccd65a8bafee3fb0376b..5a2380e0608604b05a05f2f0fc94bc6040991d18 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -787,4 +787,26 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
         return this.getBlockData().getDestroySpeed(itemStack, considerEnchants);
     }
     // Paper end - destroy speed API
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this block.
+     *
+     * @return vanilla NBT tags container
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTBlock getNbt() {
+        return new de.tr7zw.changeme.nbtapi.NBTBlock(this);
+    }
+
+    /**
+     * Returns a custom tag container of this block.
+     * <p>Block's custom data is stored within its {@link Chunk}'s persistent nbt data.
+     *
+     * @return custom NBT tags container
+     */
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTCompound getPersistentData() {
+        return getNbt().getData();
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/TileState.java b/src/main/java/org/bukkit/block/TileState.java
index 5c8517c5bcae10161952c104b6a4ff7c713bcdbd..985927cd1707116b99f1f547113048db77851416 100644
--- a/src/main/java/org/bukkit/block/TileState.java
+++ b/src/main/java/org/bukkit/block/TileState.java
@@ -50,4 +50,87 @@ public interface TileState extends BlockState, PersistentDataHolder {
      */
     boolean isSnapshot();
     // Paper end
+
+    // Kiterino start
+    /**
+     * Reads nbt data of this tile state
+     *
+     * @param consumer consumer that will be used to read the tile state's tag container
+     */
+    default void readNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, consumer);
+    }
+
+    /**
+     * Returns NBT representation of this tile state.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTTileEntity getNbt() {
+        return new de.tr7zw.changeme.nbtapi.NBTTileEntity(this);
+    }
+
+    /**
+     * Gets data from tile state's nbt
+     *
+     * @param function function that will be applied to the tile state's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the tile state and returns some value
+     *
+     * @param function function that will be applied to the tile state's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the tile state
+     *
+     * @param consumer consumer that will be used to modify the tile state's tag container
+     */
+    default void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+
+    /**
+     * Gets data from tile state's persistent nbt
+     *
+     * @param function function that will be applied to the tile state's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.getPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the tile state and returns some value
+     *
+     * @param function function that will be applied to the tile state's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the tile state
+     *
+     * @param consumer consumer that will be used to modify the tile state's persistent tag container
+     */
+    default void modifyPersistentData(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index f21a0fa8420b3fd0a3655a0af998da8f8a66c4b1..2a0ee4eb1264ea51c430b956732b5947ce60de18 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1116,4 +1116,87 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     void setImmuneToFire(@Nullable Boolean fireImmune);
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Reads nbt data of this entity
+     *
+     * @param consumer consumer that will be used to read the entity's tag container
+     */
+    default void readNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, consumer);
+    }
+
+    /**
+     * Returns NBT representation of this entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTEntity getNbt() {
+        return new de.tr7zw.changeme.nbtapi.NBTEntity(this);
+    }
+
+    /**
+     * Gets data from entity's nbt
+     *
+     * @param function function that will be applied to the entity's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the entity and returns some value
+     *
+     * @param function function that will be applied to the entity's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the entity
+     *
+     * @param consumer consumer that will be used to modify the entity's tag container
+     */
+    default void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+
+    /**
+     * Gets data from entity's persistent nbt
+     *
+     * @param function function that will be applied to the entity's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.getPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the entity and returns some value
+     *
+     * @param function function that will be applied to the entity's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the entity
+     *
+     * @param consumer consumer that will be used to modify the entity's persistent tag container
+     */
+    default void modifyPersistentData(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index ed168cba3692f55ac976c6ef31525e83ae36f5f9..91e3a7eec5bc32d07d2f8d9a28a0a6b0293675e5 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1648,4 +1648,56 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return Bukkit.getItemFactory().getHoverLines(this, advanced);
     }
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Reads nbt data of this item.
+     * <p>Note: this will copy the item, but allows context-free access to the data.
+     *
+     * @return read-only nbt container of this item
+     */
+    public de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT readNbt() {
+        return de.tr7zw.changeme.nbtapi.NBT.readNbt(this);
+    }
+
+    /**
+     * Reads nbt data of this item
+     *
+     * @param consumer consumer that will be used to read the item's tag container
+     */
+    public void readNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableItemNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, consumer);
+    }
+
+    /**
+     * Gets data from item's nbt
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableItemNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the item and returns some value
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the item
+     *
+     * @param consumer consumer that will be used to modify the item's tag container
+     */
+    public void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index 57609b7793122e135fa0c3b926500849379637b2..70fce7933d4282fdac1c2aca8c5bf3b45f74daab 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -198,4 +198,16 @@ public interface PersistentDataContainer {
         this.readFromBytes(bytes, true);
     }
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getPersistentData() {
+        return new de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
index 80b277cc57f092f04fbf7810ac78d250b207b775..789f0f63df03ca890dd77005270595bfe5167efe 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
@@ -20,4 +20,16 @@ public interface PersistentDataHolder {
     @NotNull
     PersistentDataContainer getPersistentDataContainer();
 
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    @Deprecated
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getPersistentData() {
+        return getPersistentDataContainer().getPersistentData();
+    }
+    // Kiterino end
+
 }

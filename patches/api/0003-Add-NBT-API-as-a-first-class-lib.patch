From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sat, 31 Jul 2021 20:15:05 +0300
Subject: [PATCH] Add NBT API as a first-class lib


diff --git a/build.gradle.kts b/build.gradle.kts
index fdea23beb4aee86e7080d54aa7d4ff74b0e9cf69..c8aa1a9442acfb94d72428390f063df56a165de0 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -52,6 +52,7 @@ dependencies {
     api("org.apache.logging.log4j:log4j-api:$log4jVersion")
     api("org.slf4j:slf4j-api:$slf4jVersion")
     api("io.sentry:sentry:5.4.0") // Pufferfish
+    api("de.tr7zw:item-nbt-api:2.12.2") // Kiterino
 
     implementation("org.ow2.asm:asm:9.5")
     implementation("org.ow2.asm:asm-commons:9.5")
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 38cf77e32b76bc7d9db7523f7f21427ebb72f913..c5f7bb80deb581f8f7c9bf26c0ceb7d788688842 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -796,4 +796,16 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
         return this.getBlockData().getDestroySpeed(itemStack, considerEnchants);
     }
     // Paper end - destroy speed API
+
+    // Kiterino start
+    /**
+     * Returns a custom tag container of this block.
+     * <p>Block's custom data is stored within its {@link Chunk}'s persistent nbt data.
+     *
+     * @return custom NBT tags container
+     */
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTCompound getPersistentData() {
+        return new de.tr7zw.changeme.nbtapi.NBTBlock(this).getData();
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/TileState.java b/src/main/java/org/bukkit/block/TileState.java
index 5c8517c5bcae10161952c104b6a4ff7c713bcdbd..92ee8d4b4252dd018f49b862fa2dd2026f7e869e 100644
--- a/src/main/java/org/bukkit/block/TileState.java
+++ b/src/main/java/org/bukkit/block/TileState.java
@@ -50,4 +50,77 @@ public interface TileState extends BlockState, PersistentDataHolder {
      */
     boolean isSnapshot();
     // Paper end
+
+    // Kiterino start
+    /**
+     * Reads nbt data of this tile state
+     *
+     * @param consumer consumer that will be used to read the tile state's tag container
+     */
+    default void readNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, consumer);
+    }
+
+    /**
+     * Gets data from tile state's nbt
+     *
+     * @param function function that will be applied to the tile state's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the tile state and returns some value
+     *
+     * @param function function that will be applied to the tile state's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the tile state
+     *
+     * @param consumer consumer that will be used to modify the tile state's tag container
+     */
+    default void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+
+    /**
+     * Gets data from tile state's persistent nbt
+     *
+     * @param function function that will be applied to the tile state's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.getPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the tile state and returns some value
+     *
+     * @param function function that will be applied to the tile state's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @org.jetbrains.annotations.Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the tile state
+     *
+     * @param consumer consumer that will be used to modify the tile state's persistent tag container
+     */
+    default void modifyPersistentData(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index a36fc32dd83339b6939cb4046538ec6285042397..b43efc0be59e05508c87085f05118a88d3559efd 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1155,4 +1155,77 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     void setImmuneToFire(@Nullable Boolean fireImmune);
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Reads nbt data of this entity
+     *
+     * @param consumer consumer that will be used to read the entity's tag container
+     */
+    default void readNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, consumer);
+    }
+
+    /**
+     * Gets data from entity's nbt
+     *
+     * @param function function that will be applied to the entity's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the entity and returns some value
+     *
+     * @param function function that will be applied to the entity's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the entity
+     *
+     * @param consumer consumer that will be used to modify the entity's tag container
+     */
+    default void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+
+    /**
+     * Gets data from entity's persistent nbt
+     *
+     * @param function function that will be applied to the entity's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T getPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.getPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the entity and returns some value
+     *
+     * @param function function that will be applied to the entity's persistent tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    default <T> @org.bukkit.UndefinedNullability T modifyAndGetPersistentData(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, function);
+    }
+
+    /**
+     * Modifies persistent tag container of the entity
+     *
+     * @param consumer consumer that will be used to modify the entity's persistent tag container
+     */
+    default void modifyPersistentData(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modifyPersistentData(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 54dd0bd043a37f6519fc8a318856a4825d389669..0f346bceccedd4d5e7c5df7a0f8f65fc0fad44fb 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1676,4 +1676,56 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return Bukkit.getItemFactory().getHoverLines(this, advanced);
     }
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Reads nbt data of this item.
+     * <p>Note: this <b>will copy the item</b>, but allows context-free access to the data.
+     *
+     * @return read-only nbt container of this item
+     */
+    public de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT readNbt() {
+        return de.tr7zw.changeme.nbtapi.NBT.readNbt(this);
+    }
+
+    /**
+     * Reads nbt data of this item
+     *
+     * @param consumer consumer that will be used to read the item's tag container
+     */
+    public void readNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableItemNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.get(this, consumer);
+    }
+
+    /**
+     * Gets data from item's nbt
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableItemNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the item and returns some value
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the item
+     *
+     * @param consumer consumer that will be used to modify the item's tag container
+     */
+    public void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index decf3b1949d4653a9fb01684b93ff91048137076..158b13e02f17fe9608171f1faae6a7a43aa6739d 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -219,4 +219,15 @@ public interface PersistentDataContainer {
         this.readFromBytes(bytes, true);
     }
     // Paper end - byte array serialization
+
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getPersistentData() {
+        return new de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
index 80b277cc57f092f04fbf7810ac78d250b207b775..3bba12d6855119ceb02d2a0ed96833a0ce41280a 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
@@ -20,4 +20,15 @@ public interface PersistentDataHolder {
     @NotNull
     PersistentDataContainer getPersistentDataContainer();
 
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    default @NotNull de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getPersistentData() {
+        return getPersistentDataContainer().getPersistentData();
+    }
+    // Kiterino end
+
 }

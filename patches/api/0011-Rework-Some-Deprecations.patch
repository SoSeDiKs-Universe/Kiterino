From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sat, 11 Jul 2020 20:57:52 +0300
Subject: [PATCH] Rework Some Deprecations


diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 286e780c6cbb3da66788061232b0e429cd0cdb12..55e96bdbfba7673018a9d2c32baed1bfd7b54e16 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
 /**
  * All supported color values for chat
  */
-@Deprecated // Paper
+// @Deprecated // Paper // Kiterino
 public enum ChatColor implements net.kyori.adventure.text.format.StyleBuilderApplicable, net.kyori.adventure.text.format.TextFormat { // Parchment
     /**
      * Represents black
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index df642a55003517040be795b44a8bf107dd88810b..485fb988a89b923d68077313946ff1db38f1bb7c 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -165,9 +165,11 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * UTC.
      *
      * @return Date of last log-in for this player, or 0
-     * @deprecated The API contract is ambiguous and the implementation may or may not return the correct value given this API ambiguity. It is instead recommended use {@link #getLastLogin()} or {@link #getLastSeen()} depending on your needs.
+     * @see #hasPlayedBefore()
+     * @see #getLastLogin()
+     * @see #getLastSeen()
      */
-    @Deprecated
+    //@Deprecated // Kiterino - undeprecate
     public long getLastPlayed();
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Damageable.java b/src/main/java/org/bukkit/entity/Damageable.java
index fc4d3bcd9b16097086fef7975274d825b65adb10..7b9394fcbfe608a6d05b89763bb0770f864752f3 100644
--- a/src/main/java/org/bukkit/entity/Damageable.java
+++ b/src/main/java/org/bukkit/entity/Damageable.java
@@ -60,9 +60,9 @@ public interface Damageable extends Entity {
      * Gets the maximum health this entity has.
      *
      * @return Maximum health
-     * @deprecated use {@link Attribute#GENERIC_MAX_HEALTH}.
+     * @see Attribute#GENERIC_MAX_HEALTH
      */
-    @Deprecated
+    // @Deprecated // Kiterino
     double getMaxHealth();
 
     /**
@@ -75,15 +75,15 @@ public interface Damageable extends Entity {
      * {@link Wither}, etc...} will have their bar scaled accordingly.
      *
      * @param health amount of health to set the maximum to
-     * @deprecated use {@link Attribute#GENERIC_MAX_HEALTH}.
+     * @see Attribute#GENERIC_MAX_HEALTH
      */
-    @Deprecated
+    // @Deprecated // Kiterino
     void setMaxHealth(double health);
 
     /**
      * Resets the max health to the original amount.
-     * @deprecated use {@link Attribute#GENERIC_MAX_HEALTH}.
+     * @see Attribute#GENERIC_MAX_HEALTH
      */
-    @Deprecated
+    // @Deprecated // Kiterino
     void resetMaxHealth();
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index dc437885404ae147a06cac653e519a4674a9a951..7f0396e927b22625ef56cd9411ff357e1a4e4b6d 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -281,14 +281,15 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Returns true if the entity is supported by a block.
      *
      * This value is a state updated by the client after each movement.
-     *
-     * @return True if entity is on ground.
-     * @deprecated This value is controlled only by the client and is therefore
+     * <p>
+     * Note: This value is controlled only by the client and is therefore
      * unreliable and vulnerable to spoofing and/or desync depending on the
      * context/time which it is accessed
+     *
+     * @return True if entity is on ground.
      */
     @Override
-    @Deprecated
+    // @Deprecated // Kiterino
     public boolean isOnGround();
 
     /**

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Tue, 25 Feb 2020 01:01:28 +0200
Subject: [PATCH] Extended Location API


diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 1a60a18e15780128a1914826daa952ffacb92e9e..fdc6f38ce370ca8eac7341d2307563b54ce27106 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -451,6 +451,255 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
         return this;
     }
 
+    // Kiterino start
+    /**
+     * Sets the x-coordinate of this location
+     *
+     * @param x X-coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location x(double x) {
+        this.x = x;
+        return this;
+    }
+
+    /**
+     * Sets the y-coordinate of this location
+     *
+     * @param y y-coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location y(double y) {
+        this.y = y;
+        return this;
+    }
+
+    /**
+     * Sets the z-coordinate of this location
+     *
+     * @param z z-coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location z(double z) {
+        this.z = z;
+        return this;
+    }
+
+    /**
+     * Sets the yaw of this location, measured in degrees.
+     * <ul>
+     * <li>A yaw of 0 or 360 represents the positive z direction.
+     * <li>A yaw of 180 represents the negative z direction.
+     * <li>A yaw of 90 represents the negative x direction.
+     * <li>A yaw of 270 represents the positive x direction.
+     * </ul>
+     * Increasing yaw values are the equivalent of turning to your
+     * right-facing, increasing the scale of the next respective axis, and
+     * decreasing the scale of the previous axis.
+     *
+     * @param yaw new rotation's yaw
+     * @return the same location
+     */
+    @NotNull
+    public Location yaw(float yaw) {
+        this.yaw = yaw;
+        return this;
+    }
+
+    /**
+     * Sets the pitch of this location, measured in degrees.
+     * <ul>
+     * <li>A pitch of 0 represents level forward facing.
+     * <li>A pitch of 90 represents downward facing, or negative y
+     *     direction.
+     * <li>A pitch of -90 represents upward facing, or positive y direction.
+     * </ul>
+     * Increasing pitch values the equivalent of looking down.
+     *
+     * @param pitch new incline's pitch
+     * @return the same location
+     */
+    @NotNull
+    public Location pitch(float pitch) {
+        this.pitch = pitch;
+        return this;
+    }
+
+    /**
+     * Sets the world that this location resides in
+     *
+     * @param world New world that this location resides in
+     * @return the same location
+     */
+    @NotNull
+    public Location world(@Nullable World world) {
+        this.world = (world == null) ? null : new WeakReference<>(world);
+        return this;
+    }
+
+    /**
+     * Increases X coordinate by the specified amount
+     *
+     * @param x adding value to X coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location addX(double x) {
+        this.x += x;
+        return this;
+    }
+
+    /**
+     * Increases Y coordinate by the specified amount
+     *
+     * @param y adding value to Y coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location addY(double y) {
+        this.y += y;
+        return this;
+    }
+
+    /**
+     * Increases Z coordinate by the specified amount
+     *
+     * @param z adding value to Z coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location addZ(double z) {
+        this.z += z;
+        return this;
+    }
+
+    /**
+     * Sets location's X coordinate to {@link #getBlockX()} plus the provided offset
+     *
+     * @param x adding value to X coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location localX(double x) {
+        setX(getBlockX() + x);
+        return this;
+    }
+
+    /**
+     * Sets location's Y coordinate to {@link #getBlockY()} plus the provided offset
+     *
+     * @param y adding value to Y coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location localY(double y) {
+        setY(getBlockY() + y);
+        return this;
+    }
+
+    /**
+     * Sets location's Z coordinate to {@link #getBlockZ()} plus the provided offset
+     *
+     * @param z adding value to Z coordinate
+     * @return the same location
+     */
+    @NotNull
+    public Location localZ(double z) {
+        setZ(getBlockZ() + z);
+        return this;
+    }
+
+    /**
+     * Returns location with centered X, Y and Z values.
+     *
+     * @return the same location
+     */
+    @NotNull
+    public Location center() {
+        return center(0.5);
+    }
+
+    /**
+     * Returns location with centered X and Z values.
+     * Y will be set to provided.
+     *
+     * @param y Y adding value
+     * @return the same location
+     */
+    @NotNull
+    public Location center(double y) {
+        return set(getBlockX() + 0.5, getBlockY() + y, getBlockZ() + 0.5);
+    }
+
+    /**
+     * Checks if locations have the same X, Y and Z values.
+     * <p>Ignores world.
+     *
+     * @param loc Location to check
+     * @return true if locations have same coordinates
+     */
+    public boolean isSame(@NotNull Location loc) {
+        return getY() == loc.getY() && getX() == loc.getX() && getZ() == loc.getZ();
+    }
+
+    /**
+     * Checks if locations have the same X, Y and Z values.
+     * <p>Ignores world.
+     *
+     * @param loc Location to check
+     * @return true if locations have same coordinates
+     */
+    public boolean isBlockSame(@NotNull Location loc) {
+        return getBlockX() == loc.getBlockX() && getBlockZ() == loc.getBlockZ() && getBlockY() == loc.getBlockY();
+    }
+
+    /**
+     * Shift location towards specified block face
+     *
+     * @param blockFace block face
+     * @return the same location
+     */
+    @NotNull
+    public Location shiftTowards(@NotNull org.bukkit.block.BlockFace blockFace) {
+        return add(blockFace.getModX(), blockFace.getModY(), blockFace.getModZ());
+    }
+
+    /**
+     * Shift location towards specified block face
+     *
+     * @param blockFace block face
+     * @param amount amount to shift
+     * @return the same location
+     */
+    @NotNull
+    public Location shiftTowards(@NotNull org.bukkit.block.BlockFace blockFace, double amount) {
+        return switch (blockFace) {
+            case NORTH -> addZ(-amount);
+            case EAST -> addX(amount);
+            case SOUTH -> addZ(amount);
+            case WEST -> addX(-amount);
+            case UP -> addY(amount);
+            case DOWN -> addY(-amount);
+            case NORTH_EAST -> shiftTowards(org.bukkit.block.BlockFace.NORTH, amount).shiftTowards(org.bukkit.block.BlockFace.EAST, amount);
+            case NORTH_WEST -> shiftTowards(org.bukkit.block.BlockFace.NORTH, amount).shiftTowards(org.bukkit.block.BlockFace.WEST, amount);
+            case SOUTH_EAST -> shiftTowards(org.bukkit.block.BlockFace.SOUTH, amount).shiftTowards(org.bukkit.block.BlockFace.EAST, amount);
+            case SOUTH_WEST -> shiftTowards(org.bukkit.block.BlockFace.SOUTH, amount).shiftTowards(org.bukkit.block.BlockFace.WEST, amount);
+            case WEST_NORTH_WEST -> shiftTowards(org.bukkit.block.BlockFace.WEST, amount).shiftTowards(org.bukkit.block.BlockFace.NORTH_WEST, amount);
+            case NORTH_NORTH_WEST -> shiftTowards(org.bukkit.block.BlockFace.NORTH, amount).shiftTowards(org.bukkit.block.BlockFace.NORTH_WEST, amount);
+            case NORTH_NORTH_EAST -> shiftTowards(org.bukkit.block.BlockFace.NORTH, amount).shiftTowards(org.bukkit.block.BlockFace.NORTH_EAST, amount);
+            case EAST_NORTH_EAST -> shiftTowards(org.bukkit.block.BlockFace.EAST, amount).shiftTowards(org.bukkit.block.BlockFace.NORTH_EAST, amount);
+            case EAST_SOUTH_EAST -> shiftTowards(org.bukkit.block.BlockFace.EAST, amount).shiftTowards(org.bukkit.block.BlockFace.SOUTH_EAST, amount);
+            case SOUTH_SOUTH_EAST -> shiftTowards(org.bukkit.block.BlockFace.SOUTH, amount).shiftTowards(org.bukkit.block.BlockFace.SOUTH_EAST, amount);
+            case SOUTH_SOUTH_WEST -> shiftTowards(org.bukkit.block.BlockFace.SOUTH, amount).shiftTowards(org.bukkit.block.BlockFace.SOUTH_WEST, amount);
+            case WEST_SOUTH_WEST -> shiftTowards(org.bukkit.block.BlockFace.WEST, amount).shiftTowards(org.bukkit.block.BlockFace.SOUTH_WEST, amount);
+            case SELF -> this;
+        };
+    }
+    // Kiterino end
+
     /**
      * Gets the magnitude of the location, defined as sqrt(x^2+y^2+z^2). The
      * value of this method is not cached and uses a costly square-root

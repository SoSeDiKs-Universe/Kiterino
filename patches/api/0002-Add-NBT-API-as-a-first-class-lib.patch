From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sat, 31 Jul 2021 20:15:05 +0300
Subject: [PATCH] Add NBT API as a first-class lib


diff --git a/build.gradle.kts b/build.gradle.kts
index 6b28af0e26ab2fc99f684414e2701486f68a6c41..fdf312bf708d17b251092d3a90cf3a31f55d574a 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -47,6 +47,7 @@ dependencies {
     api("org.apache.logging.log4j:log4j-api:$log4jVersion")
     api("org.slf4j:slf4j-api:$slf4jVersion")
     api("io.sentry:sentry:5.4.0") // Pufferfish
+    api("de.tr7zw:item-nbt-api:2.12.0-SNAPSHOT") // Kiterino
 
     implementation("org.ow2.asm:asm:9.4")
     implementation("org.ow2.asm:asm-commons:9.4")
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 4418c41f75e9a190dd77abdd6048b0a4fb2a57ed..acdec9b4ef0be2471ebe754f4a81054a36024075 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -338,4 +338,16 @@ public interface Chunk extends PersistentDataHolder {
          */
         UNLOADED;
     }
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this chunk.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTChunk getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTChunk(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 1c3f54382d66549dc881d4577c7104be6673a274..0f5b1f641016d2a92d2efca4765f2b2ba2f51dfd 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -784,4 +784,27 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
     @NotNull
     float getDestroySpeed(@NotNull ItemStack itemStack, boolean considerEnchants);
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this block.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTBlock getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTBlock(this);
+    }
+
+    /**
+     * Returns a custom tag container of this block.
+     * <p>Block's custom data is stored within its {@link Chunk}'s nbt data.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTCompound getNBTC() {
+        return getNBT().getData();
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/TileState.java b/src/main/java/org/bukkit/block/TileState.java
index 5c8517c5bcae10161952c104b6a4ff7c713bcdbd..febe6049bc156229c4c6fabdcc7a0a7a2e0ad974 100644
--- a/src/main/java/org/bukkit/block/TileState.java
+++ b/src/main/java/org/bukkit/block/TileState.java
@@ -50,4 +50,16 @@ public interface TileState extends BlockState, PersistentDataHolder {
      */
     boolean isSnapshot();
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this tile entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTTileEntity getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTTileEntity(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index af421c1e9ad155e190dc3fe67ed24e96857d9e33..7e5c20eb00127e9bc107b59a7e319ce18682c08e 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1016,4 +1016,16 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     void setImmuneToFire(@Nullable Boolean fireImmune);
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTEntity getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTEntity(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 64055402076b62d32ba947830d935b79bae12d95..62ed2930d5b4db3bddbc08f57d4676af8630ec78 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1620,4 +1620,46 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return random.nextInt(unbreaking + 1) > 0;
     }
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Returns read-only nbt of the item
+     *
+     * @return item's NBT tags container
+     */
+    public @NotNull de.tr7zw.changeme.nbtapi.iface.ReadableNBT readNbt() {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, nbt -> nbt);
+    }
+
+    /**
+     * Gets data from item's nbt
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T getNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadableNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.get(this, function);
+    }
+
+    /**
+     * Modifies tag container of the item
+     *
+     * @param function function that will be applied to the item's tag container
+     * @return return value of the function
+     * @param <T> parameter
+     */
+    public <T> @UndefinedNullability T modifyAndGetNbt(@NotNull java.util.function.Function<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT, @Nullable T> function) {
+        return de.tr7zw.changeme.nbtapi.NBT.modify(this, function);
+    }
+
+    /**
+     * Modifies tag container of the item
+     *
+     * @param consumer consumer that will be used to modify the item's tag container
+     */
+    public void modifyNbt(@NotNull java.util.function.Consumer<de.tr7zw.changeme.nbtapi.iface.@NotNull ReadWriteItemNBT> consumer) {
+        de.tr7zw.changeme.nbtapi.NBT.modify(this, consumer);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index 57609b7793122e135fa0c3b926500849379637b2..d0d06aeecf72e0241d373cd4f7cc53eae984f630 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -198,4 +198,16 @@ public interface PersistentDataContainer {
         this.readFromBytes(bytes, true);
     }
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getNBTC() {
+        return new de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
index 80b277cc57f092f04fbf7810ac78d250b207b775..b20272a346937763e78a13369f925e56d46ae4ac 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
@@ -20,4 +20,16 @@ public interface PersistentDataHolder {
     @NotNull
     PersistentDataContainer getPersistentDataContainer();
 
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getNBTC() {
+        return getPersistentDataContainer().getNBTC();
+    }
+    // Kiterino end
+
 }

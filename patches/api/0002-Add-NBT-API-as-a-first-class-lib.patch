From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Sat, 31 Jul 2021 20:15:05 +0300
Subject: [PATCH] Add NBT API as a first-class lib


diff --git a/build.gradle.kts b/build.gradle.kts
index 417c4324af22c870de669e338a1eee5d540184a4..ff9eb8a4e9cdebe3b89173a87251d1b18235d013 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -43,6 +43,7 @@ dependencies {
     api("org.apache.logging.log4j:log4j-api:2.17.1")
     api("org.slf4j:slf4j-api:1.8.0-beta4")
     api("io.sentry:sentry:5.4.0") // Pufferfish
+    api("de.tr7zw:item-nbt-api:2.11.2") // Kiterino
 
     implementation("org.ow2.asm:asm:9.4")
     implementation("org.ow2.asm:asm-commons:9.4")
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 2f6142b6bfaa3b523478eccd6ad13ce922e81da9..78f8f8500b6ab427462104f3820483493b7a6e96 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -302,4 +302,16 @@ public interface Chunk extends PersistentDataHolder {
      * @return if the biome is contained within
      */
     boolean contains(@NotNull Biome biome);
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this chunk.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTChunk getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTChunk(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 1c3f54382d66549dc881d4577c7104be6673a274..0f5b1f641016d2a92d2efca4765f2b2ba2f51dfd 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -784,4 +784,27 @@ public interface Block extends Metadatable, Translatable, net.kyori.adventure.tr
     @NotNull
     float getDestroySpeed(@NotNull ItemStack itemStack, boolean considerEnchants);
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this block.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTBlock getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTBlock(this);
+    }
+
+    /**
+     * Returns a custom tag container of this block.
+     * <p>Block's custom data is stored within its {@link Chunk}'s nbt data.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTCompound getNBTC() {
+        return getNBT().getData();
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/block/TileState.java b/src/main/java/org/bukkit/block/TileState.java
index 5c8517c5bcae10161952c104b6a4ff7c713bcdbd..febe6049bc156229c4c6fabdcc7a0a7a2e0ad974 100644
--- a/src/main/java/org/bukkit/block/TileState.java
+++ b/src/main/java/org/bukkit/block/TileState.java
@@ -50,4 +50,16 @@ public interface TileState extends BlockState, PersistentDataHolder {
      */
     boolean isSnapshot();
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this tile entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTTileEntity getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTTileEntity(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index cc78ce7de88a9a404ed20d5bc61b98d3107f29b3..28b6147374f89567fb016a5cd5366f3a0e26afcc 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1005,4 +1005,16 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      */
     void setImmuneToFire(@Nullable Boolean fireImmune);
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this entity.
+     *
+     * @return vanilla NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTEntity getNBT() {
+        return new de.tr7zw.changeme.nbtapi.NBTEntity(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 64055402076b62d32ba947830d935b79bae12d95..0937342a3f08856f391ed166fe4c8810ce6cc7d1 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -1620,4 +1620,42 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, Translat
         return random.nextInt(unbreaking + 1) > 0;
     }
     // Purpur end
+
+    // Kiterino start
+    /**
+     * Returns NBT representation of this item. The ItemStack will be cloned!
+     *
+     * @return item's NBT tags container
+     */
+    @NotNull
+    public de.tr7zw.changeme.nbtapi.NBTItem getNBT() {
+        return getNBT(false);
+    }
+
+    /**
+     * Returns NBT representation of this item. If directApply is true,
+     * all changes will be mapped to the original item. Changes to the NBTItem will
+     * overwrite changes done to the original item in that case.
+     *
+     * @param directApply if true, changes to NBTItem will affect this ItemStack
+     * @return item's NBT tags container
+     */
+    @NotNull
+    public de.tr7zw.changeme.nbtapi.NBTItem getNBT(boolean directApply) {
+        return new de.tr7zw.changeme.nbtapi.NBTItem(this, directApply);
+    }
+
+    /**
+     * Applies NBT data from the provided NBT item.
+     *
+     * @param nbt ItemStack's NBT container
+     */
+    public void setNBT(@NotNull de.tr7zw.changeme.nbtapi.NBTItem nbt) {
+        ItemStack nbtItem = nbt.getItem();
+        setType(nbtItem.getType());
+        setAmount(nbtItem.getAmount());
+        setData(nbtItem.getData());
+        setItemMeta(nbtItem.getItemMeta());
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index 57609b7793122e135fa0c3b926500849379637b2..d0d06aeecf72e0241d373cd4f7cc53eae984f630 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -198,4 +198,16 @@ public interface PersistentDataContainer {
         this.readFromBytes(bytes, true);
     }
     // Paper end
+
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getNBTC() {
+        return new de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer(this);
+    }
+    // Kiterino end
 }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
index 80b277cc57f092f04fbf7810ac78d250b207b775..b20272a346937763e78a13369f925e56d46ae4ac 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataHolder.java
@@ -20,4 +20,16 @@ public interface PersistentDataHolder {
     @NotNull
     PersistentDataContainer getPersistentDataContainer();
 
+    // Kiterino start
+    /**
+     * Returns a custom tag container.
+     *
+     * @return custom NBT tags container
+     */
+    @NotNull
+    default de.tr7zw.changeme.nbtapi.NBTPersistentDataContainer getNBTC() {
+        return getPersistentDataContainer().getNBTC();
+    }
+    // Kiterino end
+
 }

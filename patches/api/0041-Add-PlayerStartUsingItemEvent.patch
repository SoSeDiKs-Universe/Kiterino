From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Tue, 7 Jun 2022 14:48:35 +0300
Subject: [PATCH] Add PlayerStartUsingItemEvent


diff --git a/src/main/java/me/sosedik/kiterino/event/player/PlayerStartUsingItemEvent.java b/src/main/java/me/sosedik/kiterino/event/player/PlayerStartUsingItemEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..3603c0dfac9ee0a022dbe6797dc492405547fd25
--- /dev/null
+++ b/src/main/java/me/sosedik/kiterino/event/player/PlayerStartUsingItemEvent.java
@@ -0,0 +1,87 @@
+package me.sosedik.kiterino.event.player;
+
+import org.bukkit.entity.Player;
+import org.bukkit.event.Cancellable;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when player starts using item
+ */
+public class PlayerStartUsingItemEvent extends PlayerEvent implements Cancellable {
+
+	private static final HandlerList handlers = new HandlerList();
+
+	private final ItemStack item;
+	private int useDuration;
+	private boolean cancelled;
+
+	public PlayerStartUsingItemEvent(@NotNull final Player player, @NotNull final ItemStack item, int useDuration) {
+		super(player);
+		this.item = item;
+		this.useDuration = useDuration;
+	}
+
+	/**
+	 * Gets the item that's being used.
+	 *
+	 * @return old item
+	 */
+	@NotNull
+	public ItemStack getItem() {
+		return item;
+	}
+
+	/**
+	 * Gets for how long in ticks the item should be used
+	 * until it's ready.
+	 *
+	 * @return item use duration
+	 */
+	public int getUseDuration() {
+		return useDuration;
+	}
+
+	/**
+	 * Sets for how long in ticks the item should be used
+	 * until it's ready.
+	 *
+	 * @param useDuration item use duration
+	 */
+	public void setUseDuration(int useDuration) {
+		this.useDuration = useDuration;
+	}
+
+	/**
+	 * @return if cancelled, the item will stop being in use
+	 */
+	@Override
+	public boolean isCancelled() {
+		return cancelled;
+	}
+
+	/**
+	 * Set whether to cancel item use. If canceled,
+	 * the item will stop being in use.
+	 *
+	 * @param cancel true if you wish to cancel this event
+	 */
+	@Override
+	public void setCancelled(boolean cancel) {
+		this.cancelled = cancel;
+	}
+
+	@NotNull
+	@Override
+	public HandlerList getHandlers() {
+		return handlers;
+	}
+
+	@NotNull
+	public static HandlerList getHandlerList() {
+		return handlers;
+	}
+
+}

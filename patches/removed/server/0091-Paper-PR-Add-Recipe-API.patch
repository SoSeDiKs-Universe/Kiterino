From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lexikiq <noellekiq@gmail.com>
Date: Tue, 27 Dec 2022 13:44:13 +0200
Subject: [PATCH] Paper PR - Add Recipe API


diff --git a/src/main/java/io/papermc/paper/inventory/MenulessContainer.java b/src/main/java/io/papermc/paper/inventory/MenulessContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..1a4e041163c2c41dc05dff07e7fb229a3996aafa
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/MenulessContainer.java
@@ -0,0 +1,41 @@
+package io.papermc.paper.inventory;
+
+import net.minecraft.world.ContainerHelper;
+import net.minecraft.world.inventory.CraftingContainer;
+import net.minecraft.world.item.ItemStack;
+import org.bukkit.Location;
+
+import java.util.Collection;
+
+// "Simulates" an NMS crafting container by removing the need for a menu
+public class MenulessContainer extends CraftingContainer {
+	public MenulessContainer(int width, int height) {
+		super(null, width, height);
+	}
+
+	public MenulessContainer(int width, int height, ItemStack... items) {
+		super(null, width, height);
+		for (int i = 0; i < items.length && i < (width * height); i++) {
+			setItem(i, items[i]);
+		}
+	}
+
+	public MenulessContainer(int width, int height, Collection<ItemStack> items) {
+		this(width, height, items.toArray(new ItemStack[]{}));
+	}
+
+	@Override
+	public Location getLocation() {
+		return null;
+	}
+
+	@Override
+	public ItemStack removeItem(int slot, int amount) {
+		return ContainerHelper.removeItem(getContents(), slot, amount);
+	}
+
+	@Override
+	public void setItem(int slot, ItemStack stack) {
+		getContents().set(slot, stack);
+	}
+}
diff --git a/src/main/java/io/papermc/paper/inventory/PaperRecipeType.java b/src/main/java/io/papermc/paper/inventory/PaperRecipeType.java
new file mode 100644
index 0000000000000000000000000000000000000000..dbc170d8a217e19e45a1c82ef3e4987a3bcc4746
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/PaperRecipeType.java
@@ -0,0 +1,38 @@
+package io.papermc.paper.inventory;
+
+import io.papermc.paper.registry.PaperRegistry;
+import io.papermc.paper.registry.RegistryKey;
+import net.minecraft.core.registries.BuiltInRegistries;
+import org.bukkit.NamespacedKey;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.framework.qual.DefaultQualifier;
+
+@DefaultQualifier(NonNull.class)
+public final class PaperRecipeType {
+
+	private PaperRecipeType() {
+	}
+
+	public static net.minecraft.world.item.crafting.RecipeType asNMS(RecipeType bukkit) {
+		return PaperRegistry.getRegistry(RegistryKey.RECIPE_TYPE_REGISTRY).getMinecraftValue(bukkit);
+	}
+
+	public static RecipeType asBukkit(net.minecraft.world.item.crafting.RecipeType nms) {
+		return PaperRegistry.getRegistry(RegistryKey.RECIPE_TYPE_REGISTRY).convertToApi(BuiltInRegistries.RECIPE_TYPE.getKey(nms), nms);
+	}
+
+	public static void init() {
+		new RecipeTypeRegistry().register();
+	}
+
+	static final class RecipeTypeRegistry extends PaperRegistry<RecipeType<?, ?>, net.minecraft.world.item.crafting.RecipeType<?>> {
+		public RecipeTypeRegistry() {
+			super(RegistryKey.RECIPE_TYPE_REGISTRY);
+		}
+
+		@Override
+		public RecipeType<?, ?> convertToApi(NamespacedKey key, net.minecraft.world.item.crafting.RecipeType<?> nms) {
+			return new RecipeType<>(key);
+		}
+	}
+}
diff --git a/src/main/java/io/papermc/paper/registry/RegistryKey.java b/src/main/java/io/papermc/paper/registry/RegistryKey.java
index 3a643d57b646c83974b5157b9cbb2a9f42e9bd59..2e0a28022f7080e3d8c58d2fafd997d3f25b6ae1 100644
--- a/src/main/java/io/papermc/paper/registry/RegistryKey.java
+++ b/src/main/java/io/papermc/paper/registry/RegistryKey.java
@@ -1,5 +1,6 @@
 package io.papermc.paper.registry;
 
+import io.papermc.paper.inventory.RecipeType;
 import io.papermc.paper.world.structure.ConfiguredStructure;
 import net.minecraft.core.Registry;
 import net.minecraft.core.registries.Registries;
@@ -10,5 +11,6 @@ import org.bukkit.Keyed;
 public record RegistryKey<API extends Keyed, MINECRAFT>(Class<API> apiClass, ResourceKey<? extends Registry<MINECRAFT>> resourceKey) {
 
     public static final RegistryKey<ConfiguredStructure, Structure> CONFIGURED_STRUCTURE_REGISTRY = new RegistryKey<>(ConfiguredStructure.class, Registries.STRUCTURE);
+    public static final RegistryKey<RecipeType<?, ?>, net.minecraft.world.item.crafting.RecipeType<?>> RECIPE_TYPE_REGISTRY = new RegistryKey<>((Class<RecipeType<?, ?>>) (Object) RecipeType.class, Registries.RECIPE_TYPE);
 
 }
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
index b517f6be59506508280503df041b3cd980d54f31..8eee6f3d7d98c2d0a1395ff68759df86f517f859 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeType.java
@@ -19,6 +19,7 @@ public interface RecipeType<T extends Recipe<?>> {
             public String toString() {
                 return id;
             }
+            static { io.papermc.paper.inventory.PaperRecipeType.init(); } // Paper
         });
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c89b881d3da64060025dac58fe320db58e350f53..9d55ed89d0250caa3b0104ed24df5fe722587e25 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3089,4 +3089,17 @@ public final class CraftServer implements Server {
         CraftItemStack.asCraftCopy(new ItemStack(material)).handle.getItem().setMaxStackSize(maxStackSize);
     }
     // Kiterino end
+
+    // Paper start
+    @Override
+    public <R extends org.bukkit.inventory.Recipe> List<R> getAllRecipes(io.papermc.paper.inventory.RecipeType<R, ?> recipeType) {
+        Validate.notNull(recipeType, "recipeType parameter in getAllRecipes cannot be null");
+        var nmsRecipes = (List<net.minecraft.world.item.crafting.Recipe<?>>) getServer().getRecipeManager().getAllRecipesFor(io.papermc.paper.inventory.PaperRecipeType.asNMS(recipeType));
+        List<R> recipes = new ArrayList<>(nmsRecipes.size());
+        for (net.minecraft.world.item.crafting.Recipe<?> nmsrecipe : nmsRecipes) {
+            recipes.add((R) nmsrecipe.toBukkitRecipe());
+        }
+        return recipes;
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index a3d96aab3b0129310a01dc73c69b23efeb1db59e..482163d696399322dd05d37c4dcccf4d2ce6b8f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -2459,4 +2459,82 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return result == net.minecraft.world.InteractionResult.CONSUME;
     }
     // Paper end
+
+    // Paper start
+    public <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.RecipeType<R, ?> recipeType, net.minecraft.world.Container container) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipe cannot be null");
+        Validate.notNull(container, "container parameter in getRecipe cannot be null");
+        java.util.Optional<net.minecraft.world.item.crafting.Recipe> optionalRecipe = this.world.getRecipeManager().getRecipeFor(io.papermc.paper.inventory.PaperRecipeType.asNMS(recipeType), container, this.world);
+        return (R) optionalRecipe.map(recipe -> recipe.toBukkitRecipe()).orElse(null);
+    }
+
+    @Override
+    public <R extends org.bukkit.inventory.Recipe, I extends org.bukkit.inventory.Inventory> R getRecipe(io.papermc.paper.inventory.RecipeType<R, I> recipeType, I inventory) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipe cannot be null");
+        Validate.notNull(inventory, "inventory parameter in getRecipe cannot be null");
+        return getRecipe(recipeType, ((org.bukkit.craftbukkit.inventory.CraftInventory) inventory).getInventory());
+    }
+
+    @Override
+    public <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.RecipeType<R, ?> recipeType, java.util.Collection<org.bukkit.inventory.ItemStack> items) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipe cannot be null");
+        Validate.notNull(items, "items parameter in getRecipe cannot be null");
+        List<net.minecraft.world.item.ItemStack> nmsItems = new ArrayList<>(items.size());
+        for (ItemStack item : items) {
+            nmsItems.add(CraftItemStack.asNMSCopy(item));
+        }
+        return getRecipe(recipeType, new io.papermc.paper.inventory.MenulessContainer(3, 3, nmsItems));
+    }
+
+    @Override
+    public <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.RecipeType<R, ?> recipeType, ItemStack[] items) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipe cannot be null");
+        Validate.notNull(items, "items parameter in getRecipe cannot be null");
+        net.minecraft.world.item.ItemStack[] nmsItems = new net.minecraft.world.item.ItemStack[items.length];
+        for (int i = 0; i < items.length; i++) {
+            nmsItems[i] = CraftItemStack.asNMSCopy(items[i]);
+        }
+        return getRecipe(recipeType, new io.papermc.paper.inventory.MenulessContainer(3, 3, nmsItems));
+    }
+
+    public <R extends org.bukkit.inventory.Recipe> List<R> getRecipes(io.papermc.paper.inventory.RecipeType<R, ?> recipeType, net.minecraft.world.Container container) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipes cannot be null");
+        Validate.notNull(container, "container parameter in getRecipes cannot be null");
+        var nmsRecipes = (List<net.minecraft.world.item.crafting.Recipe>) this.world.getRecipeManager().getRecipesFor(io.papermc.paper.inventory.PaperRecipeType.asNMS(recipeType), container, this.world);
+        List<R> recipes = new ArrayList<>(nmsRecipes.size());
+        for (net.minecraft.world.item.crafting.Recipe recipe : nmsRecipes) {
+            recipes.add((R) recipe.toBukkitRecipe());
+        }
+        return recipes;
+    }
+
+    @Override
+    public <R extends org.bukkit.inventory.Recipe, I extends org.bukkit.inventory.Inventory> List<R> getRecipes(io.papermc.paper.inventory.RecipeType<R, I> recipeType, I inventory) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipes cannot be null");
+        Validate.notNull(inventory, "inventory parameter in getRecipes cannot be null");
+        return getRecipes(recipeType, ((org.bukkit.craftbukkit.inventory.CraftInventory) inventory).getInventory());
+    }
+
+    @Override
+    public <R extends org.bukkit.inventory.Recipe> List<R> getRecipes(io.papermc.paper.inventory.RecipeType<R, ?> recipeType, java.util.Collection<org.bukkit.inventory.ItemStack> items) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipes cannot be null");
+        Validate.notNull(items, "items parameter in getRecipes cannot be null");
+        List<net.minecraft.world.item.ItemStack> nmsItems = new ArrayList<>(items.size());
+        for (ItemStack item : items) {
+            nmsItems.add(CraftItemStack.asNMSCopy(item));
+        }
+        return getRecipes(recipeType, new io.papermc.paper.inventory.MenulessContainer(3, 3, nmsItems));
+    }
+
+    @Override
+    public <R extends org.bukkit.inventory.Recipe> List<R> getRecipes(io.papermc.paper.inventory.RecipeType<R, ?> recipeType, ItemStack[] items) {
+        Validate.notNull(recipeType, "recipeType parameter in getRecipes cannot be null");
+        Validate.notNull(items, "items parameter in getRecipes cannot be null");
+        net.minecraft.world.item.ItemStack[] nmsItems = new net.minecraft.world.item.ItemStack[items.length];
+        for (int i = 0; i < items.length; i++) {
+            nmsItems[i] = CraftItemStack.asNMSCopy(items[i]);
+        }
+        return getRecipes(recipeType, new io.papermc.paper.inventory.MenulessContainer(3, 3, nmsItems));
+    }
+    // Paper end
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lexikiq <noellekiq@gmail.com>
Date: Tue, 27 Dec 2022 13:44:14 +0200
Subject: [PATCH] Paper PR - Add Recipe API


diff --git a/src/main/java/io/papermc/paper/inventory/RecipeType.java b/src/main/java/io/papermc/paper/inventory/RecipeType.java
new file mode 100644
index 0000000000000000000000000000000000000000..c7328d5eaeab5c70bb7f1ef986dcc0b819707e12
--- /dev/null
+++ b/src/main/java/io/papermc/paper/inventory/RecipeType.java
@@ -0,0 +1,89 @@
+package io.papermc.paper.inventory;
+
+import io.papermc.paper.registry.Reference;
+import org.bukkit.Keyed;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Registry;
+import org.bukkit.inventory.BlastingRecipe;
+import org.bukkit.inventory.CampfireRecipe;
+import org.bukkit.inventory.CraftingInventory;
+import org.bukkit.inventory.FurnaceRecipe;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.Recipe;
+import org.bukkit.inventory.SmithingRecipe;
+import org.bukkit.inventory.SmokingRecipe;
+import org.bukkit.inventory.StonecuttingRecipe;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Objects;
+
+/**
+ * A type of recipe registered by the game or a datapack.
+ * The most common recipe type is the {@link #CRAFTING crafting table} type.
+ *
+ * @param <R> recipe class this type represents
+ * @param <I> inventory class used for matching recipes
+ */
+public class RecipeType<R extends Recipe, I extends Inventory> implements Keyed {
+
+	private final @NotNull NamespacedKey key;
+
+	/**
+	 * Creates a recipe type given the provided key.
+	 *
+	 * @param key a {@link NamespacedKey#fromString(String) NamespacedKey-like string} that
+	 *            identifies a type of recipe
+	 */
+	public RecipeType(@NotNull String key) {
+		this.key = Objects.requireNonNull(NamespacedKey.fromString(key), "Unable to parse key '" + key + "'");
+	}
+
+	/**
+	 * Creates a recipe type for the provided key.
+	 *
+	 * @param key the key that identifies a type of recipe.
+	 */
+	public RecipeType(@NotNull NamespacedKey key) {
+		this.key = Objects.requireNonNull(key, "key cannot be null");
+	}
+
+	@Override
+	public @NotNull NamespacedKey getKey() {
+		return key;
+	}
+
+	private static <R extends Recipe, C extends Inventory> Reference<RecipeType<R, C>> register(final @NotNull String id) {
+		Object reference = Reference.create(Registry.RECIPE_TYPE, NamespacedKey.minecraft(id));
+		return (Reference<RecipeType<R, C>>) reference;
+	}
+
+	/**
+	 * Recipes for crafting in a {@link org.bukkit.Material#CRAFTING_TABLE CRAFTING_TABLE}.
+	 */
+	public static final Reference<RecipeType<Recipe, CraftingInventory>> CRAFTING = register("crafting");
+	/**
+	 * Recipes for smelting inside a {@link org.bukkit.Material#FURNACE FURNACE}.
+	 */
+	public static final Reference<RecipeType<FurnaceRecipe, Inventory>> SMELTING = register("smelting");
+	/**
+	 * Recipes for smelting inside a {@link org.bukkit.Material#BLAST_FURNACE BLAST_FURNACE}.
+	 */
+	public static final Reference<RecipeType<BlastingRecipe, Inventory>> BLASTING = register("blasting");
+	/**
+	 * Recipes for smelting inside a {@link org.bukkit.Material#SMOKER SMOKER}.
+	 */
+	public static final Reference<RecipeType<SmokingRecipe, Inventory>> SMOKING = register("smoking");
+	/**
+	 * Recipes for smelting on a {@link org.bukkit.Material#CAMPFIRE CAMPFIRE}.
+	 */
+	public static final Reference<RecipeType<CampfireRecipe, Inventory>> CAMPFIRE_COOKING = register("campfire_cooking");
+	/**
+	 * Recipes for cutting in a {@link org.bukkit.Material#STONECUTTER STONECUTTER}.
+	 */
+	public static final Reference<RecipeType<StonecuttingRecipe, Inventory>> STONECUTTING = register("stonecutting");
+	/**
+	 * Recipes for upgrading items in a {@link org.bukkit.Material#SMITHING_TABLE SMITHING_TABLE}.
+	 */
+	public static final Reference<RecipeType<SmithingRecipe, Inventory>> SMITHING = register("smithing");
+
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index f279f99e9de25637f5affae35160673072b95ec0..26b41f18977dfa05e309e28236d6a7910c330246 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -2630,4 +2630,61 @@ public final class Bukkit {
         server.setMaxStackSize(material, maxStackSize);
     }
     // Kiterino end
+
+    // Paper start
+    /**
+     * Gets all recipes of a certain type.
+     *
+     * @param recipeType recipe type to check against
+     * @return all recipes registered under the input type
+     */
+    public static @NotNull <R extends org.bukkit.inventory.Recipe> List<R> getAllRecipes(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType) {
+        return server.getAllRecipes(recipeType);
+    }
+
+    /**
+     * Gets a recipe from the items inside an inventory.
+     *
+     * @param recipeType recipe type to check against
+     * @param inventory the inventory to check
+     * @return a recipe resulting from the input items, or null if no result is found
+     */
+    public static @Nullable <R extends org.bukkit.inventory.Recipe, I extends org.bukkit.inventory.Inventory> R getRecipe(io.papermc.paper.inventory.@NotNull RecipeType<R, I> recipeType, @NotNull World world, @NotNull I inventory) {
+        return world.getRecipe(recipeType, inventory);
+    }
+
+    /**
+     * Gets a recipe from a collection of items.
+     * <p>
+     * The collection should be ordered from left-to-right, top-to-bottom.
+     * The zeroth index would be the top left slot of a crafting table,
+     * the first index would be the top middle slot, et ce tera.
+     * </p>
+     * The collection of items must not be null, but the items contained inside it may be null.
+     *
+     * @param recipeType recipe type to check against
+     * @param items items to craft with
+     * @return a recipe resulting from the input items, or null if no result is found
+     */
+    public static @Nullable <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType, @NotNull World world, @NotNull Collection<@Nullable ItemStack> items) {
+        return world.getRecipe(recipeType, items);
+    }
+
+    /**
+     * Gets a recipe from an index of items.
+     * <p>
+     * The index should be ordered from left-to-right, top-to-bottom.
+     * The zeroth index would be the top left slot of a crafting table,
+     * the first index would be the top middle slot, et ce tera.
+     * </p>
+     * The array of items must not be null, but the items contained inside it may be null.
+     *
+     * @param recipeType recipe type to check against
+     * @param items items to craft with
+     * @return a recipe resulting from the input items, or null if no result is found
+     */
+    public static @Nullable <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType, @NotNull World world, ItemStack @NotNull ... items) {
+        return world.getRecipe(recipeType, items);
+    }
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 56a90dbf1a61dce615ee0f712851bf01de06b28c..3b37aa26205a7b699ab6ab2193a4331786e88ce5 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -235,6 +235,13 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
             return Arrays.stream(org.bukkit.potion.PotionEffectType.values()).iterator();
         }
     };
+
+    /**
+     * Recipe types.
+     *
+     * @see io.papermc.paper.inventory.RecipeType RecipeType
+     */
+    Registry<io.papermc.paper.inventory.RecipeType<?, ?>> RECIPE_TYPE = Bukkit.getUnsafe().registryFor((Class<io.papermc.paper.inventory.RecipeType<?, ?>>) (Object) io.papermc.paper.inventory.RecipeType.class);
     // Paper end
 
     /**
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 3e55d4a8142858606a98eb03a2c495196b17e199..ec2e9b55ee8171cf739b59f14aa0f29d88777189 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -2298,4 +2298,15 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
         material.maxStack = maxStackSize;
     }
     // Kiterino end
+
+    // Paper start
+    /**
+     * Gets all recipes of a certain type.
+     *
+     * @param recipeType recipe type to check against
+     * @return all recipes registered under the input type
+     */
+    @NotNull
+    <R extends org.bukkit.inventory.Recipe> List<R> getAllRecipes(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType);
+    // Paper end
 }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 0b4838f6f4de1d4a91b65a3fe2ea710774a4131d..6f7580f6147c4c06fc837257255407d80ef20fec 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -4139,4 +4139,90 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     boolean applyBoneMeal(@NotNull Location location, @NotNull org.bukkit.block.BlockFace face, boolean showParticles, @Nullable Predicate<org.bukkit.block.BlockState> predicate);
     // Paper end
+
+    // Paper start
+    /**
+     * Gets a recipe from the items inside an inventory.
+     *
+     * @param recipeType recipe type to check against
+     * @param inventory the inventory to check
+     * @return a recipe resulting from the input items, or null if no result is found
+     */
+    @Nullable
+    <R extends org.bukkit.inventory.Recipe, I extends org.bukkit.inventory.Inventory> R getRecipe(io.papermc.paper.inventory.@NotNull RecipeType<R, I> recipeType, @NotNull I inventory);
+
+    /**
+     * Gets a recipe from a collection of items.
+     * <p>
+     * The collection should be ordered from left-to-right, top-to-bottom.
+     * The zeroth index would be the top left slot of a crafting table,
+     * the first index would be the top middle slot, et ce tera.
+     * </p>
+     * The collection of items must not be null, but the items contained inside it may be null.
+     *
+     * @param recipeType recipe type to check against
+     * @param items items to craft with
+     * @return a recipe resulting from the input items, or null if no result is found
+     */
+    @Nullable
+    <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType, @NotNull Collection<@Nullable ItemStack> items);
+
+    /**
+     * Gets a recipe from an index of items.
+     * <p>
+     * The index should be ordered from left-to-right, top-to-bottom.
+     * The zeroth index would be the top left slot of a crafting table,
+     * the first index would be the top middle slot, et ce tera.
+     * </p>
+     * The array of items must not be null, but the items contained inside it may be null.
+     *
+     * @param recipeType recipe type to check against
+     * @param items items to craft with
+     * @return a recipe resulting from the input items, or null if no result is found
+     */
+    @Nullable
+    <R extends org.bukkit.inventory.Recipe> R getRecipe(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType, ItemStack @NotNull ... items);
+
+    /**
+     * Gets all applicable recipes from the items inside an inventory.
+     *
+     * @param recipeType recipe type to check against
+     * @param inventory the inventory to check
+     * @return the recipes resulting from the input items
+     */
+    @NotNull
+    <R extends org.bukkit.inventory.Recipe, I extends org.bukkit.inventory.Inventory> List<R> getRecipes(io.papermc.paper.inventory.@NotNull RecipeType<R, I> recipeType, @NotNull I inventory);
+
+    /**
+     * Gets all applicable recipes from a collection of items.
+     * <p>
+     * The collection should be ordered from left-to-right, top-to-bottom.
+     * The zeroth index would be the top left slot of a crafting table,
+     * the first index would be the top middle slot, et ce tera.
+     * </p>
+     * The collection of items must not be null, but the items contained inside it may be null.
+     *
+     * @param recipeType recipe type to check against
+     * @param items items to craft with
+     * @return the recipes resulting from the input items
+     */
+    @Nullable
+    <R extends org.bukkit.inventory.Recipe> List<R> getRecipes(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType, @NotNull Collection<@Nullable ItemStack> items);
+
+    /**
+     * Gets all applicable recipes from an array of items.
+     * <p>
+     * The array should be ordered from left-to-right, top-to-bottom.
+     * The zeroth index would be the top left slot of a crafting table,
+     * the first index would be the top middle slot, et ce tera.
+     * </p>
+     * The array of items must not be null, but the items contained inside it may be null.
+     *
+     * @param recipeType recipe type to check against
+     * @param items items to craft with
+     * @return the recipes resulting from the input items
+     */
+    @NotNull
+    <R extends org.bukkit.inventory.Recipe> List<R> getRecipes(io.papermc.paper.inventory.@NotNull RecipeType<R, ?> recipeType, ItemStack @NotNull ... items);
+    // Paper end
 }

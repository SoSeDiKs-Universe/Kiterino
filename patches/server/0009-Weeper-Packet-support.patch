From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Yannick Lamprecht <yannicklamprecht@live.de>
Date: Sat, 19 Jun 2021 15:47:34 +0200
Subject: [PATCH] Weeper - Packet support


diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
index b6f4400df3d8ec7e06a996de54f8cabba57885e1..551b3a710d84c6aba29a8a69162ce61a3c0f05d9 100644
--- a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
@@ -71,4 +71,59 @@ public class PaperSkinParts implements SkinParts {
             .add("hats=" + hasHatsEnabled())
             .toString();
     }
+
+    public static SkinParts.Builder builder(){
+        return new Builder();
+    }
+
+    public static class Builder implements SkinParts.Builder{
+        private int raw = 0;
+
+        private static final int CAPE = 0x01;
+        private static final int JACKET = 0x02;
+        private static final int LEFT_SLEEVE = 0x04;
+        private static final int RIGHT_SLEEVE = 0x08;
+        private static final int LEFT_PANTS = 0x10;
+        private static final int RIGHT_PANTS = 0x20;
+        private static final int HAT = 0x40;
+
+        public Builder withCape(){
+            raw |= CAPE;
+            return this;
+        }
+
+        public Builder withJacket(){
+            raw |= JACKET;
+            return this;
+        }
+
+        public Builder withLeftSleeve(){
+            raw |= LEFT_SLEEVE;
+            return this;
+        }
+
+        public Builder withRightSleeve(){
+            raw |= RIGHT_SLEEVE;
+            return this;
+        }
+
+        public Builder withLeftPants(){
+            raw |= LEFT_PANTS;
+            return this;
+        }
+
+        public Builder withRightPants(){
+            raw |= RIGHT_PANTS;
+            return this;
+        }
+
+        public Builder withHat(){
+            raw |= HAT;
+            return this;
+        }
+
+        public SkinParts build(){
+            return new PaperSkinParts(raw);
+        }
+    }
 }
diff --git a/src/main/java/com/github/weepingmc/packet/ChainablePacketStep.java b/src/main/java/com/github/weepingmc/packet/ChainablePacketStep.java
new file mode 100644
index 0000000000000000000000000000000000000000..dd4f8c075da8a23aa0fd41a5cc613ec1f75e94ef
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/ChainablePacketStep.java
@@ -0,0 +1,95 @@
+package com.github.weepingmc.packet;
+
+import net.minecraft.network.protocol.Packet;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.entity.Player;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nonnull;
+import java.util.Collection;
+import java.util.concurrent.TimeUnit;
+
+public class ChainablePacketStep implements PacketStep {
+
+	protected ChainablePacketStep next;
+	private final PacketStep current;
+
+	public ChainablePacketStep(){
+		this.current = null;
+	}
+	public ChainablePacketStep(PacketStep current) {
+		this.current = current;
+	}
+
+	public void setNext(@Nonnull ChainablePacketStep next) {
+		if (this.next == null) {
+			this.next = next;
+		} else {
+			this.next.setNext(next);
+		}
+	}
+
+	protected void executeNext(@Nonnull Collection<? extends Player> players) {
+		if (next != null) {
+			next.execute(players);
+		}
+	}
+
+	public final void execute(@Nonnull Collection<? extends Player> players) {
+		executeAll(players);
+		executeNext(players);
+	}
+
+	protected void executeAll(@Nonnull Collection<? extends Player> players) {
+		for (Player player : players) {
+			execute(player);
+		}
+	}
+
+	@Override
+	public void execute(@Nonnull Player player) {
+		if(current != null) current.execute(player);
+	}
+
+	public static class NmsPacketStep implements PacketStep {
+
+		private final Packet<?> packet;
+
+		public NmsPacketStep(Packet<?> packet) {
+			this.packet = packet;
+		}
+
+		@Override
+		public void execute(@Nonnull Player player) {
+			sendPacket(player, packet);
+		}
+
+		private void sendPacket(Player player, Packet<?> packet) {
+			((CraftPlayer) player).getHandle().connection.send(packet);
+		}
+	}
+
+	public static class DelayPacketStep extends ChainablePacketStep {
+
+		private final JavaPlugin javaPlugin;
+		private final long delay;
+		private final TimeUnit timeUnit;
+
+		public DelayPacketStep(@Nonnull JavaPlugin javaPlugin, long delay,
+		                       @Nonnull TimeUnit timeUnit) {
+			super();
+			this.javaPlugin = javaPlugin;
+			this.delay = delay;
+			this.timeUnit = timeUnit;
+		}
+
+		@Override
+		protected void executeNext(@NotNull Collection<? extends Player> players) {
+			Bukkit.getScheduler().runTaskLater(javaPlugin, () -> {
+				super.executeNext(players);
+			}, 20 * timeUnit.toSeconds(delay));
+		}
+	}
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftEntityMetaBuilder.java b/src/main/java/com/github/weepingmc/packet/CraftEntityMetaBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..163f10c384aeebe68942ce2c0563b870a933b428
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftEntityMetaBuilder.java
@@ -0,0 +1,57 @@
+package com.github.weepingmc.packet;
+
+import com.destroystokyo.paper.SkinParts;
+import com.github.weepingmc.packet.options.EntityMetaBuilder;
+import com.github.weepingmc.packet.options.EntityStatus;
+import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
+
+import javax.annotation.Nonnull;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+
+import static com.github.weepingmc.packet.CraftPacketConversion.mapStatus;
+
+public class CraftEntityMetaBuilder implements EntityMetaBuilder {
+
+	private final List<SynchedEntityData.DataItem<?>> dataWatcherList = new ArrayList<>();
+
+	public List<SynchedEntityData.DataItem<?>> build() {
+		return new ArrayList<>(dataWatcherList);
+	}
+
+	@Override
+	public @Nonnull EntityMetaBuilder withEntityStatus(@Nonnull Set<EntityStatus> entityStatus) {
+		dataWatcherList.add(new SynchedEntityData.DataItem<>(Entity.DATA_SHARED_FLAGS_ID, mapStatus(entityStatus)));
+		return this;
+	}
+
+	public @Nonnull EntityMetaBuilder withSkinParts(@Nonnull SkinParts skinParts) {
+		dataWatcherList.add(new SynchedEntityData.DataItem<>(Player.DATA_PLAYER_MODE_CUSTOMISATION, (byte) skinParts.getRaw()));
+		return this;
+	}
+
+	@Override
+	public @Nonnull EntityMetaBuilder withCustomName(@Nonnull BaseComponent[] baseComponents) {
+		return withCustomName(net.md_5.bungee.chat.ComponentSerializer.toString(baseComponents));
+	}
+
+	@Override
+	public @Nonnull EntityMetaBuilder withCustomName(@Nonnull net.kyori.adventure.text.Component component) {
+		return withCustomName(GsonComponentSerializer.gson().serialize(component));
+	}
+
+	private @Nonnull EntityMetaBuilder withCustomName(String jsonString) {
+		SynchedEntityData.DataItem<Optional<Component>> chat = new SynchedEntityData.DataItem<>(Entity.DATA_CUSTOM_NAME,
+				Optional.ofNullable(net.minecraft.network.chat.Component.Serializer.fromJson(jsonString)));
+		dataWatcherList.add(chat);
+		dataWatcherList.add(new SynchedEntityData.DataItem<>(Entity.DATA_CUSTOM_NAME_VISIBLE, true));
+		return this;
+	}
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java b/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
new file mode 100644
index 0000000000000000000000000000000000000000..06fd39cfc97f884ed00a7952c7d9f7cda0ff6395
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketConversion.java
@@ -0,0 +1,111 @@
+package com.github.weepingmc.packet;
+
+import java.util.ArrayList;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Set;
+
+import com.mojang.datafixers.util.Pair;
+
+import com.github.weepingmc.packet.options.Animation;
+import com.github.weepingmc.packet.options.EntityStatus;
+import com.github.weepingmc.packet.options.PlayerAbility;
+import com.github.weepingmc.packet.options.ProfileAction;
+import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
+import net.minecraft.world.entity.EquipmentSlot;
+import net.minecraft.world.entity.player.Abilities;
+import net.minecraft.world.item.ItemStack;
+
+public final class CraftPacketConversion {
+
+	private CraftPacketConversion() {
+	}
+
+	static ClientboundPlayerInfoUpdatePacket.Action from(ProfileAction action) {
+		switch (action) {
+			case ADD_PLAYER -> {
+				return ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER;
+			}
+			case UPDATE_LATENCY -> {
+				return ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY;
+			}
+			case INITIALIZE_CHAT -> {
+				return ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT;
+			}
+			case UPDATE_GAME_MODE -> {
+				return ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE;
+			}
+			case UPDATE_DISPLAY_NAME -> {
+				return ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME;
+			}
+
+			case UPDATE_LISTED -> {
+				return ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED;
+			}
+		}
+		throw new UnsupportedOperationException("Invalid case!");
+	}
+
+	static EquipmentSlot from(org.bukkit.inventory.EquipmentSlot equipmentSlot) {
+		return switch (equipmentSlot) {
+			case HAND -> EquipmentSlot.MAINHAND;
+			case OFF_HAND -> EquipmentSlot.OFFHAND;
+			case FEET -> EquipmentSlot.FEET;
+			case LEGS -> EquipmentSlot.LEGS;
+			case CHEST -> EquipmentSlot.CHEST;
+			case HEAD -> EquipmentSlot.HEAD;
+		};
+	}
+
+	static List<Pair<EquipmentSlot, ItemStack>> from(
+			EnumMap<org.bukkit.inventory.EquipmentSlot, org.bukkit.inventory.ItemStack> equipment) {
+		List<Pair<EquipmentSlot, ItemStack>> pairList = new ArrayList<>();
+		equipment.forEach((equipmentSlot, itemStack) -> {
+			pairList.add(new Pair<>(from(equipmentSlot), org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack)));
+		});
+		return pairList;
+	}
+
+	static byte mapStatus(Set<EntityStatus> entityStatuses) {
+
+		byte status = 0;
+
+		for (EntityStatus entityStatus : entityStatuses) {
+			switch (entityStatus) {
+				case IS_ON_FIRE -> status |= 0x01;
+				case IS_CROUCHING -> status |= 0x02;
+				case IS_SPRINTING -> status |= 0x08;
+				case IS_SWIMMING -> status |= 0x10;
+				case IS_INVISIBLE -> status |= 0x20;
+				case HAS_GLOWING_EFFECT -> status |= 0x40;
+				case IS_FLYING_WITH_ELYTRA -> status |= 0x80;
+			}
+		}
+		return status;
+	}
+
+	static int fromAnimation(Animation animation) {
+		return switch (animation) {
+			case SWING_MAIN_ARM -> 0;
+			case TAKE_DAMAGE -> 1;
+			case LEAVE_BED -> 2;
+			case SWING_OFFHAND -> 3;
+			case CRITICAL_EFFECT -> 4;
+			case MAGIC_CRITICAL_EFFECT -> 5;
+		};
+	}
+
+	static Abilities mapPlayerAbilities(Set<PlayerAbility> playerAbilities) {
+		Abilities playerAbilitiesNMS = new Abilities();
+
+		for (PlayerAbility playerAbilitiy : playerAbilities) {
+			switch (playerAbilitiy) {
+				case INVULNERABLE -> playerAbilitiesNMS.invulnerable = true;
+				case FLYING -> playerAbilitiesNMS.flying = true;
+				case ALLOW_FLYING -> playerAbilitiesNMS.mayfly = true;
+				case CREATIVE_MODE_INSTANT_BREAK -> playerAbilitiesNMS.instabuild = true;
+			}
+		}
+		return playerAbilitiesNMS;
+	}
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketPipeline.java b/src/main/java/com/github/weepingmc/packet/CraftPacketPipeline.java
new file mode 100644
index 0000000000000000000000000000000000000000..c5546d90455ee76c9fdfa1a459162237e1cf51a0
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketPipeline.java
@@ -0,0 +1,46 @@
+package com.github.weepingmc.packet;
+
+
+import com.destroystokyo.paper.PaperSkinParts;
+import com.destroystokyo.paper.SkinParts.Builder;
+import com.github.weepingmc.packet.options.EntityMetaBuilder;
+import net.minecraft.world.scores.Scoreboard;
+import org.apache.commons.lang.RandomStringUtils;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
+import org.bukkit.scoreboard.Team;
+
+import javax.annotation.Nonnull;
+
+public class CraftPacketPipeline implements PacketPipeline {
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder create() {
+		return new CraftPacketStepBuilder();
+	}
+
+	@Override
+	@Nonnull
+	public EntityMetaBuilder createEntityMetaBuilder() {
+		return new CraftEntityMetaBuilder();
+	}
+
+	@Override
+	public Builder createSkinPartsBuilder() {
+		return PaperSkinParts.builder();
+	}
+
+	@Override
+	@Nonnull
+	public Team createTeam(@Nonnull String name) {
+		Scoreboard scoreboard = new Scoreboard();
+		CraftScoreboard craftScoreboard = new CraftScoreboard(scoreboard);
+		return craftScoreboard.registerNewTeam(name);
+	}
+
+	@Override
+	@Nonnull
+	public String generateRandomString(int count, boolean letters, boolean numbers) {
+		return RandomStringUtils.random(count, letters, numbers);
+	}
+}
diff --git a/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java b/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..3e4f6e0cf840bbaa1ff29103d2ff002f54b7e3e7
--- /dev/null
+++ b/src/main/java/com/github/weepingmc/packet/CraftPacketStepBuilder.java
@@ -0,0 +1,259 @@
+package com.github.weepingmc.packet;
+
+import com.destroystokyo.paper.profile.CraftPlayerProfile;
+import com.destroystokyo.paper.profile.PlayerProfile;
+import com.github.weepingmc.packet.ChainablePacketStep.DelayPacketStep;
+import com.github.weepingmc.packet.ChainablePacketStep.NmsPacketStep;
+import com.github.weepingmc.packet.options.*;
+import com.mojang.authlib.GameProfile;
+import com.mojang.datafixers.util.Pair;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.*;
+import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket.Action;
+import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.player.Abilities;
+import net.minecraft.world.level.GameType;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
+import org.bukkit.block.data.BlockData;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.scoreboard.CraftTeam;
+import org.bukkit.inventory.ItemStack;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.bukkit.scoreboard.Team;
+import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
+import javax.annotation.Nonnull;
+import java.util.*;
+import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
+
+import static com.github.weepingmc.packet.CraftPacketConversion.from;
+import static com.github.weepingmc.packet.CraftPacketConversion.mapPlayerAbilities;
+
+public class CraftPacketStepBuilder implements PacketStepBuilder {
+
+	private final ChainablePacketStep initial = new ChainablePacketStep();
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder sendPlayerProfile(@Nonnull PlayerProfile playerProfile, @Nonnull ProfileAction profileAction, boolean listed) {
+		GameProfile gameProfile = ((CraftPlayerProfile) playerProfile).getGameProfile();
+
+		if (profileAction == ProfileAction.REMOVE_PLAYER) {
+			removePlayerProfile(playerProfile);
+		} else {
+			ClientboundPlayerInfoUpdatePacket.Entry playerUpdate =
+					new ClientboundPlayerInfoUpdatePacket.Entry(
+							gameProfile.getId(),
+							gameProfile,
+							listed,
+							0,
+							GameType.DEFAULT_MODE,
+							null,
+							null
+					);
+			ClientboundPlayerInfoUpdatePacket clientboundPlayerInfoUpdatePacket = new ClientboundPlayerInfoUpdatePacket(from(profileAction), Collections.singletonList(playerUpdate));
+			initial.setNext(of(clientboundPlayerInfoUpdatePacket));
+		}
+
+		return this;
+	}
+
+	@Override
+	public @NotNull PacketStepBuilder removePlayerProfile(@NotNull PlayerProfile playerProfile) {
+		ClientboundPlayerInfoRemovePacket clientboundPlayerInfoRemovePacket = new ClientboundPlayerInfoRemovePacket(List.of(playerProfile.getId()));
+		initial.setNext(of(clientboundPlayerInfoRemovePacket));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder spawnPlayer(int entityId, @Nonnull UUID uuid, @Nonnull Location location) {
+		initial.setNext(of(new ClientboundAddPlayerPacket(entityId, uuid, location)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder setPlayerTeam(@Nonnull Team team, @Nonnull TeamMode teamMode) {
+		var nmsTeam = ((CraftTeam)team).getHandle();
+		var packet = switch (teamMode){
+			case CREATE_TEAM, UPDATE_TEAM_INFO -> ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(nmsTeam, teamMode == TeamMode.UPDATE_TEAM_INFO);
+			case REMOVE_TEAM -> ClientboundSetPlayerTeamPacket.createRemovePacket(nmsTeam);
+			case ADD_PLAYERS_TO_TEAM, REMOVE_PLAYERS_FROM_TEAM -> {
+				var operation = (teamMode == TeamMode.ADD_PLAYERS_TO_TEAM) ? Action.ADD : Action.REMOVE;
+				yield ClientboundSetPlayerTeamPacket.createPlayerPacket(nmsTeam, "", operation);
+			}
+		};
+		initial.setNext(of(packet));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder teleportEntity(int entityId, @Nonnull Location location, boolean onGround) {
+		ClientboundTeleportEntityPacket teleportEntityPacket = new ClientboundTeleportEntityPacket(entityId, location, onGround);
+		initial.setNext(of(teleportEntityPacket));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder sendBlockChange(@Nonnull Location location, @Nonnull BlockData blockData) {
+		initial.setNext(new ChainablePacketStep((player) -> player.sendBlockChange(location, blockData)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder sleepAt(int entityId, @Nonnull Location location) {
+		List<SynchedEntityData.DataValue<?>> dataWatcherItems = new ArrayList<>();
+		dataWatcherItems.add(new SynchedEntityData.DataItem<>(Entity.DATA_POSE, Pose.SLEEPING).value());
+		dataWatcherItems.add(new SynchedEntityData.DataItem<>(LivingEntity.SLEEPING_POS_ID,
+				Optional.of(new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()))).value()
+		);
+		ClientboundSetEntityDataPacket meta = new ClientboundSetEntityDataPacket(entityId, dataWatcherItems);
+		initial.setNext(of(meta));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder rotateHead(int entityId, float yaw) {
+		initial.setNext(of(new ClientboundRotateHeadPacket(
+				entityId,
+				(byte) ((int) (yaw * 256.0F / 360.0F))
+		)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder rotateFullHead(int entityId, float yaw, float pitch, boolean onGround) {
+		initial.setNext(of(new ClientboundMoveEntityPacket.Rot(
+				entityId,
+				(byte) ((int) (yaw * 256.0F / 360.0F)),
+				(byte) ((int) (pitch * 256.0F / 360.0F)),
+				onGround
+		)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder movePositionAndRotateFullHead(int entityId, @Nonnull Vector direction, byte yaw, byte pitch, boolean onGround) {
+		initial.setNext(of(new ClientboundMoveEntityPacket.PosRot(
+				entityId,
+				(short) direction.getX(),
+				(short) direction.getY(),
+				(short) direction.getZ(),
+				(byte) ((int) (yaw * 256.0F / 360.0F)),
+				(byte) ((int) (pitch * 256.0F / 360.0F)),
+				onGround)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder destroyEntity(int entityId) {
+		initial.setNext(of(new ClientboundRemoveEntitiesPacket(entityId)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder animateBlockBreak(int entityID, @Nonnull Location location, byte destroyStage) {
+		initial.setNext(of(new ClientboundBlockDestructionPacket(entityID,
+				new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()), destroyStage)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder setEquipmentItem(int entityId, @Nonnull org.bukkit.inventory.EquipmentSlot equipmentSlot, @Nonnull ItemStack itemStack) {
+		initial.setNext(of(new ClientboundSetEquipmentPacket(entityId, Collections.singletonList(new Pair<>(from(equipmentSlot), CraftItemStack.asNMSCopy(itemStack))))));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder delay(@Nonnull JavaPlugin javaPlugin, long time, @Nonnull TimeUnit timeUnit) {
+		initial.setNext(new DelayPacketStep(javaPlugin, time, timeUnit));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder custom(@Nonnull PacketStep packetStep) {
+		initial.setNext(new ChainablePacketStep(packetStep));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder removeEntity(int entityId) {
+		initial.setNext(of(new ClientboundRemoveEntitiesPacket(entityId)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder animateEntity(int entityId, @Nonnull Animation animation) {
+		initial.setNext(of(new ClientboundAnimatePacket(entityId, CraftPacketConversion.fromAnimation(animation))));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder spawnEntity(int entityId, @Nonnull UUID uuid, @Nonnull Location location, @Nonnull org.bukkit.entity.EntityType entityType, @Nonnull Vector movementDirection) {
+		initial.setNext(of(new ClientboundAddEntityPacket(
+				entityId,
+				uuid,
+				location.getX(),
+				location.getY(),
+				location.getZ(),
+				location.getYaw(),
+				location.getPitch(),
+				BuiltInRegistries.ENTITY_TYPE.getOptional(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(entityType.getKey())).orElse(net.minecraft.world.entity.EntityType.ARMOR_STAND),
+				1,
+				new Vec3(movementDirection.getX(), movementDirection.getY(), movementDirection.getZ()),
+				0
+		)));
+		return this;
+	}
+
+	@Override
+	@Nonnull
+	public PacketStepBuilder withMeta(int entityId, @Nonnull EntityMetaBuilder metaBuilder) {
+		initial.setNext(
+				of(new ClientboundSetEntityDataPacket(entityId,
+						((CraftEntityMetaBuilder) metaBuilder).build().stream().map(SynchedEntityData.DataItem::value).collect(Collectors.toList())))
+		);
+		return this;
+	}
+
+	@Override
+	public PacketStepBuilder playerAbilities(@Nonnull Set<PlayerAbility> playerAbilities, float flySpeed, float fieldOfViewModifier) {
+		Abilities playerAbilitiesNMS = mapPlayerAbilities(playerAbilities);
+		playerAbilitiesNMS.flyingSpeed = flySpeed;
+		playerAbilitiesNMS.walkingSpeed = fieldOfViewModifier;
+		initial.setNext(of(new ClientboundPlayerAbilitiesPacket(playerAbilitiesNMS)));
+		return this;
+	}
+
+	@Override
+	public void send(@Nonnull Collection<? extends org.bukkit.entity.Player> players) {
+		initial.execute(players);
+	}
+
+	private ChainablePacketStep of(Packet<?> packet) {
+		return new ChainablePacketStep(new NmsPacketStep(packet));
+	}
+}
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java
index ab823de3fe0eb4870cd7fec543730d6d17060940..a9baed17730c0ea9ab9490f99fc36318cd598765 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundAddPlayerPacket.java
@@ -34,6 +34,18 @@ public class ClientboundAddPlayerPacket implements Packet<ClientGamePacketListen
         this.xRot = buf.readByte();
     }
 
+    // Weeper start
+    public ClientboundAddPlayerPacket(int entityId, UUID uuid, org.bukkit.Location location) {
+        this.entityId = entityId;
+        this.playerId = uuid;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yRot = (byte) ((int) (location.getYaw() * 256.0F / 360.0F));
+        this.xRot = (byte) ((int) (location.getPitch() * 256.0F / 360.0F));
+    }
+    // Weeper end
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.entityId);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java
index 2dce930e691731781a6700610271dd549cf34fe8..7edd16dca725827bd38ba32b0bf6d27db5c7e483 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundAnimatePacket.java
@@ -23,6 +23,13 @@ public class ClientboundAnimatePacket implements Packet<ClientGamePacketListener
         this.action = buf.readUnsignedByte();
     }
 
+    // Weeper start - allow packet creation without real entity
+    public ClientboundAnimatePacket(int entityId, int animationId) {
+        this.id = entityId;
+        this.action = animationId;
+    }
+    // Weeper end
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.id);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
index 4aa8b483841028fbcc43f9ed47730881263e5065..0193ee39704c3eeef5dc12518fe72a291c5185c7 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
@@ -47,6 +47,13 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         });
     }
 
+    // Weeper start
+    public ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action action, List<ClientboundPlayerInfoUpdatePacket.Entry> playerUpdates) {
+        this.actions = EnumSet.of(action);
+        this.entries = playerUpdates;
+    }
+    // Weeper end
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeEnumSet(this.actions, ClientboundPlayerInfoUpdatePacket.Action.class);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java
index 15ebf22e9ca11870e5f24ff5ab8bcbee8c571ee3..24cb08563e9b6f93f6a8f4921134e08182bc5959 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundRotateHeadPacket.java
@@ -19,6 +19,13 @@ public class ClientboundRotateHeadPacket implements Packet<ClientGamePacketListe
         this.yHeadRot = buf.readByte();
     }
 
+    // Weeper start - allow packet creation without real entity
+    public ClientboundRotateHeadPacket(int entityId, byte yHeadRot) {
+        this.entityId = entityId;
+        this.yHeadRot = yHeadRot;
+    }
+    // Weeper end
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.entityId);
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
index d5f404fb6dc09c48d84b4a3e75c12f2fbb53c224..90fb9b576ed74a9063574f7bc3926668e7ee0612 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
@@ -35,6 +35,18 @@ public class ClientboundTeleportEntityPacket implements Packet<ClientGamePacketL
         this.onGround = buf.readBoolean();
     }
 
+    // Weeper start
+    public ClientboundTeleportEntityPacket(int entityId, org.bukkit.Location location, boolean isOnGround) {
+        this.id = entityId;
+        this.x = location.getX();
+        this.y = location.getY();
+        this.z = location.getZ();
+        this.yRot = (byte) ((int) (location.getYaw() * 256.0F / 360.0F));
+        this.xRot = (byte) ((int) (location.getPitch() * 256.0F / 360.0F));
+        this.onGround = isOnGround;
+    }
+    // Weeper end
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.id);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7f6455d7cee4a634bc3323232f6e5df629eac999..44331a22dc0e297e45efe780efde1308fa5c22f3 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -346,7 +346,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public int invulnerableTime;
     protected boolean firstTick;
     protected final SynchedEntityData entityData;
-    protected static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE);
+    public static final EntityDataAccessor<Byte> DATA_SHARED_FLAGS_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BYTE); // Weeper protected -> public
     protected static final int FLAG_ONFIRE = 0;
     private static final int FLAG_SHIFT_KEY_DOWN = 1;
     private static final int FLAG_SPRINTING = 3;
@@ -355,11 +355,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     protected static final int FLAG_GLOWING = 6;
     protected static final int FLAG_FALL_FLYING = 7;
     private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
-    private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
-    private static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
+    public static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT); // Weeper private -> public
+    public static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN); // Weeper private -> public
     private static final EntityDataAccessor<Boolean> DATA_SILENT = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_NO_GRAVITY = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
-    protected static final EntityDataAccessor<net.minecraft.world.entity.Pose> DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE);
+    public static final EntityDataAccessor<net.minecraft.world.entity.Pose> DATA_POSE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.POSE); // Weeper protected -> public
     private static final EntityDataAccessor<Integer> DATA_TICKS_FROZEN = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
     private EntityInLevelCallback levelCallback;
     private final VecDeltaCodec packetPositionCodec;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 0b08cf7b26731ffd6f3909342f4e3a92fe0c813e..88f2ed316c56a15993b412685287b35ab40188c8 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -175,7 +175,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     private static final EntityDataAccessor<Boolean> DATA_EFFECT_AMBIENCE_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Integer> DATA_ARROW_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_STINGER_COUNT_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.INT);
-    private static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.OPTIONAL_BLOCK_POS);
+    public static final EntityDataAccessor<Optional<BlockPos>> SLEEPING_POS_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.OPTIONAL_BLOCK_POS); // Weeper private -> public
     protected static final float DEFAULT_EYE_HEIGHT = 1.74F;
     protected static final EntityDimensions SLEEPING_DIMENSIONS = EntityDimensions.fixed(0.2F, 0.2F);
     public static final float EXTRA_RENDER_CULLING_SIZE_WITH_BIG_HAT = 0.5F;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ec5d4148cd283ba50fc479f00d0791d1296d3b07..9847a2610d7e799687c875bf24945e64ed2993f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3162,6 +3162,14 @@ public final class CraftServer implements Server {
 
     // Paper end
 
+    // Weeper start
+    private final com.github.weepingmc.packet.PacketPipeline packetPipeline = new com.github.weepingmc.packet.CraftPacketPipeline();
+    @Override
+    public @Nonnull com.github.weepingmc.packet.PacketPipeline getPacketPipeline() {
+        return packetPipeline;
+    }
+    // Weeper end
+
     // Purpur start
     @Override
     public String getServerName() {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 13190c4265bb83e682dede7e982ebcd19d80e334..ebc955787559f4b2edab6b1c8f5873aa1e1fbe9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -20,7 +20,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     final Scoreboard board;
     boolean registeredGlobally = false; // Paper
 
-    CraftScoreboard(Scoreboard board) {
+    public CraftScoreboard(Scoreboard board) { // Weeper package private -> public
         this.board = board;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 7098b77fe4275e39694ed7d8fb031b9397302b9f..296d963c48aa997332674525b60028219af5748c 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -12,14 +12,20 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.scoreboard.NameTagVisibility;
 import org.bukkit.scoreboard.Team;
 
-final class CraftTeam extends CraftScoreboardComponent implements Team {
+public final class CraftTeam extends CraftScoreboardComponent implements Team { // Weeper package private -> public
     private final PlayerTeam team;
 
-    CraftTeam(CraftScoreboard scoreboard, PlayerTeam team) {
+    public CraftTeam(CraftScoreboard scoreboard, PlayerTeam team) { // Weeper package private -> public
         super(scoreboard);
         this.team = team;
     }
 
+    // Weeper start
+    public PlayerTeam getHandle() {
+        return team;
+    }
+    // Weeper end
+
     @Override
     public String getName() throws IllegalStateException {
         this.checkState();

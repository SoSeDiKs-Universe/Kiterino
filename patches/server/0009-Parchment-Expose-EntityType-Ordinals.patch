From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: lexikiq <noellekiq@gmail.com>
Date: Sun, 20 Jun 2021 23:15:44 -0400
Subject: [PATCH] Parchment - Expose EntityType Ordinals


diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index 7ba73edc37d14eca0fee178cf576e115689010b6..894f78a73d07c8a11ea6a407473c9224143f2ccb 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -161,6 +161,8 @@ import org.slf4j.Logger;
 
 public class EntityType<T extends Entity> implements FeatureElement, EntityTypeTest<Entity, T> {
 
+    private static int ordinal = 0; // Parchment
+    private static final java.util.Map<EntityType<?>, Integer> ordinals = new java.util.HashMap<>(); // Parchment
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String ENTITY_TAG = "EntityTag";
     private final Holder.Reference<EntityType<?>> builtInRegistryHolder;
@@ -306,9 +308,30 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     private final FeatureFlagSet requiredFeatures;
 
     private static <T extends Entity> EntityType<T> register(String id, EntityType.Builder type) { // CraftBukkit - decompile error
-        return (EntityType) Registry.register(BuiltInRegistries.ENTITY_TYPE, id, (EntityType<T>) type.build(id)); // CraftBukkit - decompile error
+        // Parchment start
+        EntityType<T> build = type.build(id);
+        ordinals.put(build, ordinal++);
+        return (EntityType) Registry.register(BuiltInRegistries.ENTITY_TYPE, id, (EntityType<T>) build); // CraftBukkit - decompile error
     }
 
+    public int ordinal() {
+        return ordinals.get(this);
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        EntityType<?> that = (EntityType<?>) o;
+        return descriptionId != null && descriptionId.equals(that.descriptionId);
+    }
+
+    @Override
+    public int hashCode() {
+        return descriptionId == null ? -1 : java.util.Objects.hash(descriptionId);
+    }
+    // Parchment end
+
     // Purpur start
     public static EntityType<?> getFromBukkitType(org.bukkit.entity.EntityType bukkitType) {
         return getFromKey(new ResourceLocation(bukkitType.getKey().toString()));
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 5a516962f8b7e6a6cd9a2e473dffc905f043d914..d506d6f2682e558bc92cf02b474d89dd5fa8a300 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -624,6 +624,19 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
     // Paper end
 
+    // Parchment start
+    @Override
+    public int entityID(org.bukkit.entity.EntityType type) {
+        String name = type.getName();
+        if (name == null) {
+            throw new IllegalArgumentException("Entity name is undefined");
+        }
+        return net.minecraft.world.entity.EntityType.byString(name)
+                .orElseThrow(() -> new IllegalArgumentException("Could not find corresponding NMS entity"))
+                .ordinal();
+    }
+    // Parchment end
+
     /**
      * This helper class represents the different NBT Tags.
      * <p>

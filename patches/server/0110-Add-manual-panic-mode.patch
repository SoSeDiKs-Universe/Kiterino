From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Wed, 24 May 2023 17:13:25 +0300
Subject: [PATCH] Add manual panic mode


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 4b787e249fab7bf88132c144a34148b8f30f38bc..f57d98dc5b84ad566688749f92b9203c2ed57c5b 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -339,6 +339,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     protected final RandomSource random;
     public int tickCount;
     private int remainingFireTicks;
+    public int forcePanicTicks; public boolean isForcePanicking() { return forcePanicTicks > 0; } // Kiterino
     public boolean wasTouchingWater;
     protected Object2DoubleMap<TagKey<Fluid>> fluidHeight;
     protected boolean wasEyeInWater;
@@ -937,6 +938,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
         }
 
+        // Kiterino start
+        if (this.forcePanicTicks > 0) {
+            this.forcePanicTicks--;
+        }
+        // Kiterino end
+
         if (this.isInLava()) {
             this.lavaHurt();
             this.fallDistance *= 0.5F;
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java
index eee92ab1b4072a5b72559dd21dc590cce7d8bca9..7a728a08cda941bb7d873af526a1d48d032dceb8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/AnimalPanic.java
@@ -24,7 +24,7 @@ public class AnimalPanic extends Behavior<PathfinderMob> {
     private static final int PANIC_DISTANCE_HORIZONTAL = 5;
     private static final int PANIC_DISTANCE_VERTICAL = 4;
     private static final Predicate<PathfinderMob> DEFAULT_SHOULD_PANIC_PREDICATE = (entity) -> {
-        return entity.getLastHurtByMob() != null || entity.isFreezing() || entity.isOnFire();
+        return entity.getLastHurtByMob() != null || entity.isFreezing() || entity.isOnFire() || entity.isForcePanicking(); // Kiterino - manual panic
     };
     private final float speedMultiplier;
     private final Predicate<PathfinderMob> shouldPanic;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 744b8246a79e0119734c44ce485536ddac8b190c..4934b9f3dfa91e8b32b1a7da7fa854d2523ecef6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -48,7 +48,7 @@ public class PanicGoal extends Goal {
     }
 
     protected boolean shouldPanic() {
-        return this.mob.getLastHurtByMob() != null || this.mob.isFreezing() || this.mob.isOnFire();
+        return this.mob.getLastHurtByMob() != null || this.mob.isFreezing() || this.mob.isOnFire() || this.mob.isForcePanicking(); // Kiterino - manual panic
     }
 
     protected boolean findRandomPosition() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index d6279bf8771fc4d575dd7467fc436b16b3ef8e30..86be04ffc98eeaedd7083b0ca40e10a6c4e1ccb3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1607,5 +1607,15 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public boolean hasFixedPose() {
         return getHandle().fixedPose;
     }
+
+    @Override
+    public int getPanicTicks() {
+        return getHandle().forcePanicTicks;
+    }
+
+    @Override
+    public void setPanicTicks(int ticks) {
+        getHandle().forcePanicTicks = Math.max(0, ticks);
+    }
     // Kiterino end
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Tue, 7 Jun 2022 15:31:47 +0300
Subject: [PATCH] Vanilla edible items


diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 3397486368134e7ab69f7793468b3ab5c4a1fb4b..3463db3a30cc7a2449fd7e76b723c257b30c9572 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -66,7 +66,7 @@ public class Item implements ItemLike {
     @Nullable
     private String descriptionId;
     @Nullable
-    private final FoodProperties foodProperties;
+    private FoodProperties foodProperties; // Kiterino - remove final
 
     public static int getId(Item item) {
         return item == null ? 0 : Registry.ITEM.getId(item);
@@ -368,6 +368,13 @@ public class Item implements ItemLike {
         return SoundEvents.GENERIC_DRINK;
     }
 
+    // Kiterino start
+    public void setFoodProperties(@Nullable FoodProperties foodProperties) {
+        this.foodProperties = foodProperties;
+    }
+    // Kiterino end
+
+
     public SoundEvent getEatingSound() {
         return SoundEvents.GENERIC_EAT;
     }
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index 1b1fa1217a73f6aff650bc868096eae020d934d8..05ecfd455aeaa8d301fd1c63a041842b0e0ed9c4 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -529,12 +529,23 @@ public class PurpurConfig {
             return;
         }
         properties.getKeys(false).forEach(foodKey -> {
-            FoodProperties food = Foods.ALL_PROPERTIES.get(foodKey);
-            if (food == null) {
-                PurpurConfig.log(Level.SEVERE, "Invalid food property: " + foodKey);
-                return;
+            // Kiterino start
+            FoodProperties foodCheck = Foods.ALL_PROPERTIES.get(foodKey);
+            FoodProperties food;
+            org.bukkit.Material material;
+            if (foodCheck == null) {
+                material = org.bukkit.Material.getMaterial(foodKey.toUpperCase());
+                if (material == null) {
+                    PurpurConfig.log(Level.SEVERE, "Invalid food property: " + foodKey);
+                    return;
+                }
+                food = new FoodProperties.Builder().build();
+            } else {
+                food = foodCheck;
+                material = null;
             }
-            FoodProperties foodDefaults = Foods.DEFAULT_PROPERTIES.get(foodKey);
+            FoodProperties foodDefaults = material == null ? Foods.DEFAULT_PROPERTIES.get(foodKey) : food.copy();
+            // Kiterino end
             food.setNutrition(properties.getInt(foodKey + ".nutrition", foodDefaults.getNutrition()));
             food.setSaturationModifier((float) properties.getDouble(foodKey + ".saturation-modifier", foodDefaults.getSaturationModifier()));
             food.setIsMeat(properties.getBoolean(foodKey + ".is-meat", foodDefaults.isMeat()));
@@ -571,6 +582,7 @@ public class PurpurConfig {
                     food.getEffects().add(Pair.of(new MobEffectInstance(effect, duration, amplifier, ambient, visible, showIcon), chance));
                 });
             }
+            if (material != null) org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftCopy(new org.bukkit.inventory.ItemStack(material)).handle.getItem().setFoodProperties(food); // Kiterino
         });
     }
 

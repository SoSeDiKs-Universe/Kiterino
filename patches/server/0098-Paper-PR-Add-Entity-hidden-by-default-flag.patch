From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Justin <justin@justinf.dev>
Date: Wed, 24 Aug 2022 05:17:20 -0700
Subject: [PATCH] Paper PR - Add Entity hidden by default flag

Adds a boolean to the server Entity controlling if the entity should be hidden by default.
The TrackedEntity maintains a set of all players that will be able to see the entity even
when it is hidden by default. This set is modified when Player#showEntity and Player#hideEntity
are invoked. Changes are made to the way that TrackedEntity updates players when the entity is
hidden by default - if a player is not present in the above set, the update is abandoned.

This functionality is expanded when a Player is hidden by default. The player will send out
PlayerInfo packets to hide themselves from other Players when hiddenByDefault. There remains a
discrepancy when trying to getHiddenPlayers - players that are hidden by default are currently
not returned from this method, only those hidden with hideEntity or hidePlayer.

Hiding entities by default also respects precedent of keeping entities hidden when other plugins
explicitly hide them from a player. If an entity is hidden by default and by a plugin, the entity
must have the plugin that hid them from a player show them in order to be shown to a player again.
If no plugin had previously hidden the entity before the entity was hidden by default, then any
plugin that attempts to show the entity to a player will succeed in doing so.

diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 75965afd7b4bed23a5ecf618c7f91ff5e7ffd92f..d9a1e7648ce3f0f88676225ba2b8d7de38319251 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1501,6 +1501,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         private final int range;
         SectionPos lastSectionPos;
         public final Set<ServerPlayerConnection> seenBy = new ReferenceOpenHashSet<>(); // Paper - optimise map impl
+        public final Set<ServerPlayerConnection> showToEvenWhenHiddenByDefault = new ReferenceOpenHashSet<>(); // Paper - Entity hiddenByDefault
 
         public TrackedEntity(Entity entity, int i, int j, boolean flag) {
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, this.seenBy); // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 9ad4f17f6483a1ea095d82f7e565136c955f695d..82415fb73b5ef87adac87e41e715322df2d0a9a3 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -398,6 +398,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     private UUID originWorld;
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
     public boolean collidingWithWorldBorder; // Paper
+    public boolean hiddenByDefault; // Paper
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
     public boolean fixedPose = false; // Kiterino
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 3e415f9fe282d3edde6b84b0a66e7852d2551fbd..512028fec57d4003b22d348941636894661053b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1417,6 +1417,32 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
     // Paper End - Collision API
 
+    // Paper start - Entity hiddenByDefault
+    @Override
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        this.getHandle().hiddenByDefault = hiddenByDefault;
+
+        // We need to update the players again
+        ChunkMap.TrackedEntity entityTracker = this.getHandle().tracker;
+
+        // Tracker was not initialized yet
+        if (entityTracker == null) {
+            return;
+        }
+
+        // If the entity is already hiddenByDefault, we reset our "show to" set to again hide the entity from all players that may be seeing the entity
+        // We also clear the "show to" set when we stop hiding by default
+        entityTracker.showToEvenWhenHiddenByDefault.clear();
+
+        entityTracker.updatePlayers(this.server.getHandle().getPlayers());
+    }
+
+    @Override
+    public boolean isHiddenByDefault() {
+        return this.getHandle().hiddenByDefault;
+    }
+    // Paper end
+
     // Purpur start
     @Override
     public org.bukkit.entity.Player getRider() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 8787b76d0b258de319401b47045984b9d0d4b014..ee4b96fc4e05ac0a4ffceb01d38f9aac68b87c92 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1777,6 +1777,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         ChunkMap tracker = ((ServerLevel) this.getHandle().level).getChunkSource().chunkMap;
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
         if (entry != null) {
+            entry.showToEvenWhenHiddenByDefault.remove(this.getHandle().connection); // Paper - Entity hiddenByDefault
             entry.removePlayer(this.getHandle());
         }
 
@@ -1814,13 +1815,22 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (this.equals(entity)) return;
 
         Set<WeakReference<Plugin>> hidingPlugins = this.hiddenEntities.get(entity.getUniqueId());
-        if (hidingPlugins == null) {
-            return; // Entity isn't hidden
-        }
-        hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
-        if (!hidingPlugins.isEmpty()) {
-            return; // Some other plugins still want the entity hidden
+        // Paper start - Entity hiddenByDefault
+        if (hidingPlugins != null) {
+            hidingPlugins.remove(CraftPlayer.getPluginWeakReference(plugin));
+            if (!hidingPlugins.isEmpty()) {
+                return; // Some other plugins still want the entity hidden
+            }
+        } else {
+            if (!entity.isHiddenByDefault()) {
+                return; // Entity isn't hidden
+            }
+            ChunkMap.TrackedEntity entityTracker = ((CraftEntity) entity).getHandle().tracker;
+            if (entityTracker == null || entityTracker.showToEvenWhenHiddenByDefault.contains(this.getHandle().connection)) {
+                return; // Entity isn't hidden
+            }
         }
+        // Paper end
         this.hiddenEntities.remove(entity.getUniqueId());
 
         // Paper start
@@ -1839,9 +1849,15 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
-        if (entry != null && !entry.seenBy.contains(this.getHandle().connection)) {
-            entry.updatePlayer(this.getHandle());
+        // Paper start - Entity hiddenByDefault
+        if (entry != null) {
+            entry.showToEvenWhenHiddenByDefault.add(this.getHandle().connection);
+
+            if (!entry.seenBy.contains(this.getHandle().connection)) {
+                entry.updatePlayer(this.getHandle());
+            }
         }
+        // Paper end
     }
     // Paper start
     private void reregisterPlayer(ServerPlayer player) {
@@ -1899,7 +1915,16 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public boolean canSee(org.bukkit.entity.Entity entity) {
-        return !this.hiddenEntities.containsKey(entity.getUniqueId());
+        // Paper start - Entity hiddenByDefault
+        boolean shownWhenHiddenByDefault = true;
+
+        if (entity.isHiddenByDefault()) {
+            ChunkMap.TrackedEntity tracker = ((CraftEntity) entity).getHandle().tracker;
+            shownWhenHiddenByDefault = tracker == null || tracker.showToEvenWhenHiddenByDefault.contains(this.getHandle().connection);
+        }
+
+        return !this.hiddenEntities.containsKey(entity.getUniqueId()) && shownWhenHiddenByDefault;
+        // Paper end
     }
 
     // Paper start
@@ -3092,6 +3117,29 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
+    // Paper start - Entity hiddenByDefault
+    @Override
+    public void setHiddenByDefault(boolean hiddenByDefault) {
+        // Update server lists
+        if (hiddenByDefault) {
+            for (CraftPlayer player : this.server.getOnlinePlayers()) {
+                if (player == this || !player.canSee(this)) continue;
+
+                player.getHandle().connection.send(new ClientboundPlayerInfoRemovePacket(List.of(this.getHandle().getUUID())));
+            }
+        } else {
+            for (CraftPlayer player : this.server.getOnlinePlayers()) {
+                if (player == this || player.canSee(this)) continue;
+
+                player.getHandle().connection.send(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, this.getHandle()));
+            }
+        }
+
+        // Now, process trackers
+        super.setHiddenByDefault(hiddenByDefault);
+    }
+    // Paper end
+
     public Player.Spigot spigot()
     {
         return this.spigot;

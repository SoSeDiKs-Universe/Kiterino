From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Thu, 27 Oct 2022 15:47:27 +0300
Subject: [PATCH] Spawning player API


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 065e24faf9164c0c2feef04c695e64014875a699..0296adf5cb4b2f0e73cebba9ac06eafb49b31072 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -419,6 +419,27 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public int activatedPriority = gg.pufferfish.pufferfish.PufferfishConfig.maximumActivationPrio; // golf score
     public final BlockPos.MutableBlockPos cachedBlockPos = new BlockPos.MutableBlockPos(); // used where needed
     // Pufferfish end
+
+    // Kiterino start
+    public @Nullable UUID spawningPlayerUuid;
+
+    public void updateSpawningPlayer() {
+        if (!this.level.paperConfig().entities.spawning.perPlayerMobSpawns) return;
+        if (!(getLevel() instanceof ServerLevel level)) return;
+        if (this.spawningPlayerUuid != null) return;
+
+        var inRange = level.getChunkSource().chunkMap.playerMobDistanceMap.getObjectsInRange(chunkPosition());
+        if (inRange == null) return;
+
+        final Object[] backingSet = inRange.getBackingSet();
+        for (Object o : backingSet) {
+            if (o instanceof ServerPlayer player) {
+                this.spawningPlayerUuid = player.getUUID();
+                break;
+            }
+        }
+    }
+    // Kiterino end
     
     public float getBukkitYaw() {
         return this.yRot;
@@ -2326,6 +2347,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 nbt.putBoolean("Purpur.FireImmune", immuneToFire);
             }
             // Purpur end
+
+            // Kiterino start
+            if (spawningPlayerUuid != null) {
+                nbt.putUUID("Kiterino.SpawningPlayerUUID", spawningPlayerUuid);
+            }
+            // Kiterino end
             return nbt;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -2499,6 +2526,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
             // Purpur end
 
+            // Kiterino start
+            if (nbt.contains("Kiterino.SpawningPlayerUUID")) {
+                spawningPlayerUuid = nbt.getUUID("Kiterino.SpawningPlayerUUID");
+            }
+            // Kiterino end
+
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
             CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Entity being loaded");
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 6b8356e592bfca69cf785457284c99e47e360bd6..4bcd4886e925fc3deff7b21b7801f6cbe9d8a1bb 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -291,6 +291,7 @@ public final class NaturalSpawner {
 
                                         entityinsentient.moveTo(d0, (double) i, d1, world.random.nextFloat() * 360.0F, 0.0F);
                                         if (NaturalSpawner.isValidPositionForMob(world, entityinsentient, d2)) {
+                                            entityinsentient.updateSpawningPlayer(); // Kiterino
                                             groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.NATURAL, groupdataentity, (CompoundTag) null);
                                             // CraftBukkit start
                                             // SPIGOT-7045: Give ocelot babies back their special spawn reason. Note: This is the only modification required as ocelots count as monsters which means they only spawn during normal chunk ticking and do not spawn during chunk generation as starter mobs.
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index b678ab6ed6de356b3aabc0e5e3edfab9b33e1eb0..637db4b4ed51434b5a685fc7bb2f4f0e9d73c3ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1439,4 +1439,11 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         getHandle().immuneToFire = fireImmune;
     }
     // Purpur end
+
+    // Kiterino start
+    @Override
+    public UUID getSpawningPlayerUuid() {
+        return getHandle().spawningPlayerUuid;
+    }
+    // Kiterino end
 }

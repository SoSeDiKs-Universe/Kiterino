From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Thu, 27 Oct 2022 15:47:27 +0300
Subject: [PATCH] Spawning player API


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index ae7c656bb6fcab734d69d5491832b4a133400041..1f828ffd36100029890b1f8845a7907e0c4ad16c 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -444,6 +444,27 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return this.yRot;
     }
 
+    // Kiterino start
+    public @Nullable UUID spawningPlayerUuid;
+
+    public void updateSpawningPlayer() {
+        if (!(this.level() instanceof ServerLevel level)) return;
+        if (!level.paperConfig().entities.spawning.perPlayerMobSpawns) return;
+        if (this.spawningPlayerUuid != null) return;
+
+        var inRange = level.getChunkSource().chunkMap.playerMobDistanceMap.getObjectsInRange(chunkPosition());
+        if (inRange == null) return;
+
+        final Object[] backingSet = inRange.getBackingSet();
+        for (Object o : backingSet) {
+            if (o instanceof ServerPlayer player) {
+                this.spawningPlayerUuid = player.getUUID();
+                break;
+            }
+        }
+    }
+    // Kiterino end
+
     public boolean isChunkLoaded() {
         return this.level.hasChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4);
     }
@@ -2511,6 +2532,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 nbt.putBoolean("Purpur.FireImmune", immuneToFire);
             }
             // Purpur end
+            // Kiterino start
+            if (spawningPlayerUuid != null) {
+                nbt.putUUID("Kiterino.SpawningPlayerUUID", spawningPlayerUuid);
+            }
+            // Kiterino end
             return nbt;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -2684,6 +2710,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 immuneToFire = nbt.getBoolean("Purpur.FireImmune");
             }
             // Purpur end
+            // Kiterino start
+            if (nbt.contains("Kiterino.SpawningPlayerUUID")) {
+                spawningPlayerUuid = nbt.getUUID("Kiterino.SpawningPlayerUUID");
+            }
+            // Kiterino end
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 327a3d5cd5ea4db98e6bad90fc0bb1464033c71e..6573380c9a50c9148afa10599e397d20a541160d 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -292,6 +292,7 @@ public final class NaturalSpawner {
 
                                         entityinsentient.moveTo(d0, (double) i, d1, world.random.nextFloat() * 360.0F, 0.0F);
                                         if (NaturalSpawner.isValidPositionForMob(world, entityinsentient, d2)) {
+                                            entityinsentient.updateSpawningPlayer(); // Kiterino
                                             groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.NATURAL, groupdataentity, (CompoundTag) null);
                                             // CraftBukkit start
                                             // SPIGOT-7045: Give ocelot babies back their special spawn reason. Note: This is the only modification required as ocelots count as monsters which means they only spawn during normal chunk ticking and do not spawn during chunk generation as starter mobs.
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index b78f8db7fc89dacffefe57f973b872f867e4861b..123a3395a69c7093f3a9ef023cfb5b325b236850 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1505,4 +1505,11 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return !getHandle().dismountsUnderwater();
     }
     // Purpur end
+
+    // Kiterino start
+    @Override
+    public UUID getSpawningPlayerUuid() {
+        return getHandle().spawningPlayerUuid;
+    }
+    // Kiterino end
 }

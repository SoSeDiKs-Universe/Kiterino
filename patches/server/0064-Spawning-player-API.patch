From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Thu, 27 Oct 2022 15:47:27 +0300
Subject: [PATCH] Spawning player API


diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2de54da93b3de0c780483755930afcaf0ad08af0..348013a93a7cef1bf7b7df18d1c2f5684f0e61e9 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -438,6 +438,27 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         return this.yRot;
     }
 
+    // Kiterino start
+    public @Nullable UUID spawningPlayerUuid;
+
+    public void updateSpawningPlayer() {
+        if (!(this.level() instanceof ServerLevel level)) return;
+        if (!level.paperConfig().entities.spawning.perPlayerMobSpawns) return;
+        if (this.spawningPlayerUuid != null) return;
+
+        var inRange = level.getChunkSource().chunkMap.playerMobSpawnMap.getObjectsInRange(chunkPosition());
+        if (inRange == null) return;
+
+        final Object[] backingSet = inRange.getBackingSet();
+        for (Object o : backingSet) {
+            if (o instanceof ServerPlayer player) {
+                this.spawningPlayerUuid = player.getUUID();
+                break;
+            }
+        }
+    }
+    // Kiterino end
+
     public boolean isChunkLoaded() {
         return this.level.hasChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4);
     }
@@ -2462,6 +2483,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 nbt.putBoolean("Purpur.FireImmune", immuneToFire);
             }
             // Purpur end
+            // Kiterino start
+            if (spawningPlayerUuid != null) {
+                nbt.putUUID("Kiterino.SpawningPlayerUUID", spawningPlayerUuid);
+            }
+            // Kiterino end
             return nbt;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -2635,6 +2661,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 immuneToFire = nbt.getBoolean("Purpur.FireImmune");
             }
             // Purpur end
+            // Kiterino start
+            if (nbt.contains("Kiterino.SpawningPlayerUUID")) {
+                spawningPlayerUuid = nbt.getUUID("Kiterino.SpawningPlayerUUID");
+            }
+            // Kiterino end
 
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 51a4d0b212278a20363fd0d3cb253f0e3047e961..a3474cf694ce887cdfe93c7bc83f1318f387e905 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -295,6 +295,7 @@ public final class NaturalSpawner {
 
                                         entityinsentient.moveTo(d0, (double) i, d1, world.random.nextFloat() * 360.0F, 0.0F);
                                         if (NaturalSpawner.isValidPositionForMob(world, entityinsentient, d2)) {
+                                            entityinsentient.updateSpawningPlayer(); // Kiterino
                                             groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.NATURAL, groupdataentity, (CompoundTag) null);
                                             // CraftBukkit start
                                             // SPIGOT-7045: Give ocelot babies back their special spawn reason. Note: This is the only modification required as ocelots count as monsters which means they only spawn during normal chunk ticking and do not spawn during chunk generation as starter mobs.
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index e0ad11a45df2cd73cdc17b1a260e72b15745011b..5a15b65972329437b73f544741d7d7252164ac16 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1582,4 +1582,11 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return !getHandle().dismountsUnderwater();
     }
     // Purpur end
+
+    // Kiterino start
+    @Override
+    public UUID getSpawningPlayerUuid() {
+        return getHandle().spawningPlayerUuid;
+    }
+    // Kiterino end
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 10 Apr 2016 22:50:33 -0400
Subject: [PATCH] EMC - Allow Vehicle/Passenger Teleporting for Bukkit API

If Bukkit teleport is called, teleport the whole set of entities together and maintain the chain.

diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index ce03cd59919507c0471fe3450f64a50282f6a698..639cae1f99bf528770343f6da0f9565ee512552e 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -830,7 +830,7 @@ public abstract class PlayerList {
 
     public ServerPlayer respawn(ServerPlayer entityplayer, ServerLevel worldserver, boolean flag, Location location, boolean avoidSuffocation, RespawnReason reason, org.bukkit.event.player.PlayerRespawnEvent.RespawnFlag...respawnFlags) {
         // Paper end
-        entityplayer.stopRiding(); // CraftBukkit
+        //entityplayer.stopRiding(); // CraftBukkit // EMC - remove stop riding
         this.players.remove(entityplayer);
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         entityplayer.serverLevel().removePlayerImmediately(entityplayer, Entity.RemovalReason.DISCARDED);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 6bbd2d53672bfd59a5e64ac5a244225f489fb28f..bcc300d642c8d133201d2c919ab079710b41c809 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -301,7 +301,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
     public ImmutableList<Entity> passengers;
     protected int boardingCooldown;
     @Nullable
-    private Entity vehicle;
+    public Entity vehicle; // EMC - make public
     private Level level;
     public double xo;
     public double yo;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 99589c948c7c0e3e8a56971315658d8bedffd11a..32ed37ba1a381bdf4346928f84a1767bc80cc6fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -240,6 +240,86 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         return this.teleport(location, TeleportCause.PLUGIN);
     }
 
+    // EMC start - vehicle passenger teleporting
+    private static CraftEntity teleportingEntity;
+    private CraftEntity storedRoot;
+    private com.google.common.collect.ImmutableList<CraftEntity> storedPassengers;
+    void detachEntities() {
+        if (teleportingEntity == null) {
+            teleportingEntity = this;
+            this.storedRoot = entity.getRootVehicle().getBukkitEntity();
+            this.storedRoot.detachEntities();
+            teleportingEntity = null;
+            return;
+        }
+        this.storedPassengers = this.entity.passengers.stream().map(Entity::getBukkitEntity).collect(com.google.common.collect.ImmutableList.toImmutableList());
+        this.forceEjectPassengers();
+        for (CraftEntity ent : this.storedPassengers) {
+            ent.detachEntities();
+        }
+    }
+    void forceEjectPassengers() {
+        for (int i = this.entity.passengers.size() - 1; i >= 0; --i) {
+            Entity passenger = (this.entity.passengers.get(i));
+            passenger.vehicle = null;
+        }
+        this.entity.passengers = com.google.common.collect.ImmutableList.of();
+    }
+    void teleportAndReattachEntities(Location location) {
+        if (teleportingEntity == null) {
+            if (this.storedRoot != null) {
+                teleportingEntity = this;
+                this.storedRoot.teleportAndReattachEntities(location);
+                this.storedRoot.reattachPassengers();
+                this.storedRoot = null;
+                teleportingEntity = null;
+            }
+            return;
+        }
+        if (!teleportingEntity.equals(this)) {
+            this.teleportEntity(location);
+        }
+        for (CraftEntity ent : this.storedPassengers) {
+            ent.teleportAndReattachEntities(location);
+        }
+    }
+    void teleportEntity(Location location) {
+        if (getWorld().equals(location.getWorld())) {
+            if (this.storedPassengers == null || this.storedPassengers.isEmpty()) {
+                this.entity.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+                this.entity.setYHeadRot(location.getYaw());
+            } else {
+                // This section has code from TeleportCommand class
+                ServerLevel world = (ServerLevel) this.entity.level();
+                Entity entity1 = this.entity;
+                Entity target = entity1.getType().create(world);
+                if (target == null) {
+                    return;
+                }
+                target.restoreFrom(entity1);
+                target.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
+                target.setYHeadRot(location.getYaw());
+                entity1.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION);
+                this.setHandle(target);
+                world.addDuringTeleport(target);
+            }
+        } else {
+            this.entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location));
+        }
+    }
+    private void reattachPassengers() {
+        if (this.storedPassengers == null) {
+            return;
+        }
+        this.entity.passengers = this.storedPassengers.stream().map(CraftEntity::getHandle).collect(com.google.common.collect.ImmutableList.toImmutableList());
+        for (CraftEntity passenger : this.storedPassengers) {
+            passenger.getHandle().vehicle = this.getHandle();
+            passenger.reattachPassengers();
+        }
+        this.storedPassengers = null;
+    }
+    // EMC end - vehicle passenger teleporting
+
     @Override
     public boolean teleport(Location location, TeleportCause cause) {
         // Paper start - Teleport passenger API
@@ -256,12 +336,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         boolean dismount = !flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_VEHICLE);
         boolean ignorePassengers = flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS);
         // Don't allow teleporting between worlds while keeping passengers
-        if (flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS) && this.entity.isVehicle() && location.getWorld() != this.getWorld()) {
+        if (false && flagSet.contains(io.papermc.paper.entity.TeleportFlag.EntityState.RETAIN_PASSENGERS) && this.entity.isVehicle() && location.getWorld() != this.getWorld()) { // EMC - we can teleport between worlds with passengers
             return false;
         }
 
         // Don't allow to teleport between worlds if remaining on vehicle
-        if (!dismount && this.entity.isPassenger() && location.getWorld() != this.getWorld()) {
+        if (false && !dismount && this.entity.isPassenger() && location.getWorld() != this.getWorld()) { // EMC - we can teleport between worlds with passengers
             return false;
         }
         // Paper end
@@ -287,12 +367,14 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
         // If this entity is riding another entity, we must dismount before teleporting.
         if (dismount) this.entity.stopRiding(); // Paper - Teleport passenger API
+        this.detachEntities(); // EMC
 
         // Let the server handle cross world teleports
         if (location.getWorld() != null && !location.getWorld().equals(this.getWorld())) {
             // Prevent teleportation to an other world during world generation
             Preconditions.checkState(!this.entity.generation, "Cannot teleport entity to an other world during world generation");
             this.entity.teleportTo(((CraftWorld) location.getWorld()).getHandle(), CraftLocation.toVec3D(location));
+            this.teleportAndReattachEntities(location); // EMC
             return true;
         }
 
@@ -301,6 +383,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         // SPIGOT-619: Force sync head rotation also
         this.entity.setYHeadRot(location.getYaw());
 
+        this.teleportAndReattachEntities(location); // EMC
         return true;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 7dab81c7fae682ec20d859756b8ac1a483477c7e..e4312af4a4c1447e02d01c70ae1b16d65b1d866c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -1346,12 +1346,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         Preconditions.checkArgument(location.getWorld() != null, "location.world");
         // Paper start - Teleport passenger API
         // Don't allow teleporting between worlds while keeping passengers
-        if (ignorePassengers && entity.isVehicle() && location.getWorld() != this.getWorld()) {
+        if (false && ignorePassengers && entity.isVehicle() && location.getWorld() != this.getWorld()) { // EMC - we can teleport between worlds with passengers
             return false;
         }
 
         // Don't allow to teleport between worlds if remaining on vehicle
-        if (!dismount && entity.isPassenger() && location.getWorld() != this.getWorld()) {
+        if (false && !dismount && entity.isPassenger() && location.getWorld() != this.getWorld()) { // EMC - we can teleport between worlds with passengers
             return false;
         }
         // Paper end
@@ -1367,7 +1367,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             return false;
         }
 
-        if (entity.isVehicle() && !ignorePassengers) { // Paper - Teleport API
+        if (false && entity.isVehicle() && !ignorePassengers) { // Paper - Teleport API // EMC
             // Purpur start
             if (new org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent(entity.getBukkitEntity(), org.purpurmc.purpur.event.entity.EntityTeleportHinderedEvent.Reason.IS_VEHICLE, cause).callEvent())
                 return teleport(location, cause);
@@ -1409,6 +1409,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             this.getHandle().closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.TELEPORT); // Paper
         }
 
+        this.detachEntities(); // EMC
         // Check if the fromWorld and toWorld are the same.
         if (fromWorld == toWorld) {
             // Paper start - Teleport API
@@ -1422,9 +1423,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             // The respawn reason should never be used if the passed location is non null.
             this.server.getHandle().respawn(entity, toWorld, true, to, !toWorld.paperConfig().environment.disableTeleportationSuffocationCheck, null); // Paper
         }
+        this.teleportAndReattachEntities(location); // EMC
         return true;
     }
 
+    // EMC start
+    @Override
+    void teleportEntity(Location location) {
+        ServerPlayer entity = this.getHandle();
+        if (getWorld().equals(location.getWorld())) {
+            entity.connection.teleport(location);
+        } else {
+            ServerLevel toWorld = ((CraftWorld) location.getWorld()).getHandle();
+            server.getHandle().respawn(entity, toWorld, true, location, !toWorld.paperConfig().environment.disableTeleportationSuffocationCheck, null);
+        }
+    }
+    // EMC end
+
     @Override
     public void setSneaking(boolean sneak) {
         this.getHandle().setShiftKeyDown(sneak);

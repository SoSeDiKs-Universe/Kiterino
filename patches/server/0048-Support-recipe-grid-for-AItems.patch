From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Wed, 8 Jun 2022 13:03:53 +0300
Subject: [PATCH] Support recipe grid for AItems


diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index b1c24a02b87aca7b180a6efbce177f2300db49c1..c15c7eeaa1f2bafbba6f46fe42ad6cfe31a3f79e 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -205,7 +205,7 @@ public class Inventory implements Container, Nameable {
         for (int i = 0; i < this.items.size(); ++i) {
             ItemStack itemstack1 = (ItemStack) this.items.get(i);
 
-            if (!((ItemStack) this.items.get(i)).isEmpty() && ItemStack.isSameItemSameTags(stack, (ItemStack) this.items.get(i)) && !((ItemStack) this.items.get(i)).isDamaged() && !itemstack1.isEnchanted() && !itemstack1.hasCustomHoverName()) {
+            if (!itemstack1.isEmpty() && itemstack1.getItem() == stack.getItem() && ItemStack.recipesTagsMatch(itemstack1, stack)) { // Kiterino - less limited items in the crafting grid
                 return i;
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/player/StackedContents.java b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
index 63fc6074082b579c3f88316008cbeb2a2d7f5841..491aaf05c50e30d2894e64616db0df7b097293da 100644
--- a/src/main/java/net/minecraft/world/entity/player/StackedContents.java
+++ b/src/main/java/net/minecraft/world/entity/player/StackedContents.java
@@ -24,7 +24,7 @@ public class StackedContents {
 
     public void accountSimpleStack(ItemStack stack) {
         if (this.extrasMap != null && stack.hasTag() && this.extrasMap.accountStack(stack, Math.min(64, stack.getCount()))) return; // Paper - max of 64 due to accountStack method below
-        if (!stack.isDamaged() && !stack.isEnchanted() && !stack.hasCustomHoverName()) {
+        if (/*!stack.isDamaged() && !stack.isEnchanted() && */!stack.hasCustomHoverName()) { // Kiterino - allow damaged and enchanted items
             this.accountStack(stack);
         }
 
@@ -57,16 +57,21 @@ public class StackedContents {
 
             @Override
             public boolean equals(@Nullable ItemStack a, @Nullable ItemStack b) {
-                if (a == null || b == null) {
-                    return false;
-                }
-                return ItemStack.matches(a, b);
+                return ItemStack.recipesTagsMatch(a, b); // Kiterino - less strict check
             }
         });
         private final it.unimi.dsi.fastutil.ints.Int2ObjectMap<net.minecraft.world.item.ItemStack> idToItemstack = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap<>();
 
         @Override
         public int getId(ItemStack value) {
+            // Kiterino start
+            if (!this.itemstackToId.containsKey(value)) {
+                final ItemStack copy = value.copy();
+                copy.setTag(ItemStack.getStripped(copy.getTag()));
+                if (!copy.hasTag()) return getStackingIndex(copy);
+                value = copy;
+            }
+            // Kiterino end
             if (!this.itemstackToId.containsKey(value)) {
                 final int id = this.idCounter.incrementAndGet();
                 final ItemStack copy = value.copy();
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 7e68596e28db88213e9352f798c5a4ce37cc5656..1b8d1ce483cda9acb84d7e3a6ff0bed366c68997 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -784,6 +784,54 @@ public final class ItemStack {
         return !stack.is(otherStack.getItem()) ? false : (stack.isEmpty() && otherStack.isEmpty() ? true : Objects.equals(stack.tag, otherStack.tag));
     }
 
+    // Kiterino start
+    public static boolean recipesTagsMatch(@Nullable ItemStack comparing, @Nullable ItemStack expected) {
+        if (comparing == null || expected == null) return false;
+        if (comparing.isEmpty()) return expected.isEmpty();
+        if (expected.isEmpty()) return false;
+
+        var compund1 = getStripped(expected.getTag());
+        if (compund1 == null) { // Vanilla tagless item
+            return comparing.is(expected.getItem());
+        }
+
+        String namespace = org.bukkit.Bukkit.getName();
+        if (compund1.contains(namespace, Tag.TAG_COMPOUND)) {
+            compund1 = compund1.getCompound(namespace);
+            if (compund1.contains("Id", Tag.TAG_STRING)) { // Custom kItem
+                var compound2 = getStripped(comparing.getTag());
+                if (compound2 == null) return false;
+                if (!compound2.contains(namespace, Tag.TAG_COMPOUND)) return false;
+
+                compound2 = compound2.getCompound(namespace);
+                return compund1.getString("Id").equals(compound2.getString("Id"));
+            }
+        }
+
+        return comparing.is(expected.getItem());
+    }
+
+    public static @Nullable CompoundTag getStripped(@Nullable CompoundTag nbt) {
+        if (nbt == null) return null;
+        nbt = nbt.copy();
+        nbt.remove(ItemStack.TAG_ENCH);
+        nbt.remove(ItemStack.TAG_DAMAGE);
+        // Only keep custom item ID
+        String namespace = org.bukkit.Bukkit.getName();
+        if (nbt.contains(namespace, Tag.TAG_COMPOUND)) {
+            var knbt = nbt.getCompound(namespace);
+            nbt.remove(namespace);
+            if (knbt.contains("Id", Tag.TAG_STRING)) {
+                String id = knbt.getString("Id");
+                knbt = new CompoundTag();
+                knbt.putString("Id", id);
+                nbt.put(namespace, knbt);
+            }
+        }
+        return nbt.isEmpty() ? null : nbt;
+    }
+    // Kiterino end
+
     public String getDescriptionId() {
         return this.getItem().getDescriptionId(this);
     }
diff --git a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
index 5e8f5f020165c46d7bfd1c333c7060b142e6e5cd..966ac6acffe7729e06f3983528573bcc98d51a9a 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
@@ -54,7 +54,7 @@ public final class Ingredient implements Predicate<ItemStack> {
                 return recipeitemstack_provider.getItems().stream();
                 // PaperPR start
             }).distinct().peek(stack -> {
-                stack.isExactRecipeIngredient = this.exact;
+                stack.isExactRecipeIngredient = this.exact || this.kItem; // Kiterino
             }).toArray((i) -> {
                 // PaperPR end
                 return new ItemStack[i];

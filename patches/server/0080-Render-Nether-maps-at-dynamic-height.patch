From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SoSeDiK <mrsosedik@gmail.com>
Date: Mon, 5 Dec 2022 18:09:34 +0200
Subject: [PATCH] Render Nether maps at dynamic height


diff --git a/src/main/java/net/minecraft/world/item/EmptyMapItem.java b/src/main/java/net/minecraft/world/item/EmptyMapItem.java
index a87f4d82d4f6678b7c060de129997809d5722512..c5d6fcc750a9b4387588ac5cbd6045ac8158c632 100644
--- a/src/main/java/net/minecraft/world/item/EmptyMapItem.java
+++ b/src/main/java/net/minecraft/world/item/EmptyMapItem.java
@@ -25,6 +25,10 @@ public class EmptyMapItem extends ComplexItem {
             user.awardStat(Stats.ITEM_USED.get(this));
             user.level().playSound((Player)null, user, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, user.getSoundSource(), 1.0F, 1.0F);
             ItemStack itemStack2 = MapItem.create(world, user.getBlockX(), user.getBlockZ(), (byte)0, true, false);
+            // Kiterino start
+            net.minecraft.nbt.CompoundTag tag = itemStack2.getTag();
+            if (tag != null) tag.putInt("Kiterino.MapYLevel", user.getBlockY());
+            // Kiterino end
             if (itemStack.isEmpty()) {
                 return InteractionResultHolder.consume(itemStack2);
             } else {
diff --git a/src/main/java/net/minecraft/world/item/MapItem.java b/src/main/java/net/minecraft/world/item/MapItem.java
index 735486b46581bb3b91c85f57490b560ff490787e..42d7616622ce2182dd62c9b4cc27720a540445c8 100644
--- a/src/main/java/net/minecraft/world/item/MapItem.java
+++ b/src/main/java/net/minecraft/world/item/MapItem.java
@@ -111,7 +111,7 @@ public class MapItem extends ComplexItem {
             int i1 = Mth.floor(entity.getZ() - (double) k) / i + 64;
             int j1 = 128 / i;
 
-            if (world.dimensionType().hasCeiling()) {
+            if (false && world.dimensionType().hasCeiling()) { // Kiterino
                 j1 /= 2;
             }
 
@@ -141,7 +141,7 @@ public class MapItem extends ComplexItem {
                                 double d1 = 0.0D;
                                 int i3;
 
-                                if (world.dimensionType().hasCeiling()) {
+                                if (false && world.dimensionType().hasCeiling()) { // Kiterino
                                     i3 = j2 + k2 * 231871;
                                     i3 = i3 * i3 * 31287121 + i3 * 11;
                                     if ((i3 >> 20 & 1) == 0) {
@@ -155,7 +155,7 @@ public class MapItem extends ComplexItem {
                                     for (i3 = 0; i3 < i; ++i3) {
                                         for (int j3 = 0; j3 < i; ++j3) {
                                             blockposition_mutableblockposition.set(j2 + i3, 0, k2 + j3);
-                                            int k3 = chunk.getHeight(Heightmap.Types.WORLD_SURFACE, blockposition_mutableblockposition.getX(), blockposition_mutableblockposition.getZ()) + 1;
+                                            int k3 = world.dimensionType().hasCeiling() ? getRenderHeight((Player) entity, state) : chunk.getHeight(Heightmap.Types.WORLD_SURFACE, blockposition_mutableblockposition.getX(), blockposition_mutableblockposition.getZ()) + 1;
                                             BlockState iblockdata;
 
                                             if (k3 > world.getMinBuildHeight() + 1) {
@@ -229,6 +229,19 @@ public class MapItem extends ComplexItem {
         }
     }
 
+    // Kiterino start
+    public int getRenderHeight(Player player, MapItemSavedData state) {
+        for (int slot = 0; slot < player.getInventory().getContainerSize(); slot++) {
+            ItemStack item = player.getInventory().getItem(slot);
+            if (item.getItem() instanceof MapItem && MapItem.getSavedData(item, player.level()) == state) {
+                CompoundTag tag = item.getTag();
+                return (tag == null || !tag.contains("Kiterino.MapYLevel")) ? 100 : tag.getInt("Kiterino.MapYLevel");
+            }
+        }
+        return 100;
+    }
+    // Kiterino end
+
     private BlockState getCorrectStateForFluidBlock(Level world, BlockState state, BlockPos pos) {
         FluidState fluid = state.getFluidState();
 
